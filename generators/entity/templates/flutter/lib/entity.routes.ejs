<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
_%>

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/views/<%= entityFileName %>_update_screen.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/views/<%= entityFileName %>_view_screen.dart';
import 'bloc/<%= entityFileName %>_bloc.dart';
import 'views/<%= entityFileName %>_list_screen.dart';
import '<%= entityFileName %>_repository.dart';

class <%= entityClass %>Routes {
  static const list = '/<%= entityInstance %>';
  static const create = '/<%= entityInstance %>-create';
  static const edit = '/<%= entityInstance %>-edit';
  static const view = '/<%= entityInstance %>-view';

  static const listScreenKey = Key('__<%= entityInstance %>ListScreen__');
  static const createScreenKey = Key('__<%= entityInstance %>CreateScreen__');
  static const editScreenKey = Key('__<%= entityInstance %>EditScreen__');
  static const viewScreenKey = Key('__<%= entityInstance %>ViewScreen__');


  static final <%= entityInstance %>Routes = <GoRoute>[
    GoRoute(
      name: '<%= entityInstance %>',
      path: list,
      pageBuilder: (context, state) => MaterialPage(
        child: BlocProvider<<%= entityClass %>Bloc>(
          create: (context) => <%= entityClass %>Bloc(
            <%= entityInstance %>Repository: <%= entityClass %>Repository(),
          )..add(Load<%= entityClass %>List()),
          child: <%= entityClass %>ListScreen(),
        ),
      ),
    ),
    GoRoute(
      name: '<%= entityInstance %>create',
      path: create,
      pageBuilder: (context, state) => MaterialPage(
        child: BlocProvider<<%= entityClass %>Bloc>(
          create: (context) => <%= entityClass %>Bloc(
            <%= entityInstance %>Repository: <%= entityClass %>Repository(),
          ),
          child: const <%= entityClass %>UpdateScreen(),
        ),
      ),
    ),
    GoRoute(
        name: '<%= entityInstance %>edit',
        path: edit,
        pageBuilder: (context, state) => MaterialPage(
              child: BlocProvider<<%= entityClass %>Bloc>(
                create: (context) => <%= entityClass %>Bloc(
                  <%= entityInstance %>Repository: <%= entityClass %>Repository(),
                )..add(Load<%= entityClass %>ByIdForEdit(id: state.extra as int)),
                child: const <%= entityClass %>UpdateScreen(),
              ),
            )),
    GoRoute(
      name: '<%= entityInstance %>view',
      path: view,
      pageBuilder: (context, state) => MaterialPage(
        child: BlocProvider<<%= entityClass %>Bloc>(
          create: (context) => <%= entityClass %>Bloc(
            <%= entityInstance %>Repository: <%= entityClass %>Repository(),
          )..add(Load<%= entityClass %>ByIdForView(id: state.extra as int)),
          child: const <%= entityClass %>ViewScreen(),
        ),
      ),
    ),
  ];
}
