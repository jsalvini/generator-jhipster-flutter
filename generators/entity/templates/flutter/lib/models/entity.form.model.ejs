<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
let found = false;
_%>
import 'package:formz/formz.dart';
import 'package:regexpattern/regexpattern.dart';
import 'package:<%= baseName %>/core/core.dart';
<%_ fields.forEach(field => { _%>
  <%_ if(field.fieldIsEnum && !found) { _%>
    import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
    <%_ found = true; _%>
    <%_ } _%>
<%_ }); _%>

<%_ fields.forEach(field => { _%>
  <%_ if(field.fieldType === 'DateTime') { _%>
enum <%= field.fieldNameCapitalized %>ValidationError { invalid }

class <%= field.fieldNameCapitalized %>Input extends FormzInput<<%= field.fieldType %>, <%= field.fieldNameCapitalized %>ValidationError> {
  const <%= field.fieldNameCapitalized %>Input.pure(<%= field.fieldType %> value) : super.pure(value);
  const <%= field.fieldNameCapitalized %>Input.dirty(<%= field.fieldType %> value) : super.dirty(value);

  @override
  <%= field.fieldNameCapitalized %>ValidationError? validator(<%= field.fieldType %> value) {
    return null;
  }
}
  <%_ } else if(field.fieldIsEnum) { _%>
enum <%= field.fieldNameCapitalized %>ValidationError { invalid }

class <%= field.fieldNameCapitalized %>Input extends FormzInput<<%= field.fieldType %>, <%= field.fieldNameCapitalized %>ValidationError> {
  const <%= field.fieldNameCapitalized %>Input.pure() : super.pure(<%= field.fieldType %>.<%= field.fieldValues.split(',')[0] %>);
  const <%= field.fieldNameCapitalized %>Input.dirty(<%= field.fieldType %> value) : super.dirty(value);

  @override
  <%= field.fieldNameCapitalized %>ValidationError? validator(<%= field.fieldType %> value) {
    return null;
  }
}
<%_ } else if(field.fieldType === 'int') { _%>
enum <%= field.fieldNameCapitalized %>ValidationError { invalid }

extension <%= field.fieldNameCapitalized %>ValidationErrorMessage on <%= field.fieldNameCapitalized %>ValidationError {
  String invalidMessage() =>
      'El <%= field.fieldNameHumanized %> no es valido:\n\t${MessageValidation.numerosEnteros}';
}

class <%= field.fieldNameCapitalized %>Input extends FormzInput<<%= field.fieldType %>, <%= field.fieldNameCapitalized %>ValidationError> {
  const <%= field.fieldNameCapitalized %>Input.pure() : super.pure(<%- field.defaultValue %>);
  const <%= field.fieldNameCapitalized %>Input.dirty([<%= field.fieldType %> value = <%- field.defaultValue %>]) : super.dirty(value);

  @override
  <%= field.fieldNameCapitalized %>ValidationError? validator(<%= field.fieldType %> value) {
    if (!value.isFinite) {
      return <%= field.fieldNameCapitalized %>ValidationError.invalid;
    } else if (value.isNegative) {
      return <%= field.fieldNameCapitalized %>ValidationError.invalid;
    }
    return null;
  }
}
<%_ } else if(field.fieldType === 'double') { _%>
  enum <%= field.fieldNameCapitalized %>ValidationError { invalid }

  extension <%= field.fieldNameCapitalized %>ValidationErrorMessage on <%= field.fieldNameCapitalized %>ValidationError {
    String invalidMessage() =>
        'El <%= field.fieldNameHumanized %> no es valido:\n\t${MessageValidation.numerosDecimales}';
  }

  class <%= field.fieldNameCapitalized %>Input extends FormzInput<<%= field.fieldType %>, <%= field.fieldNameCapitalized %>ValidationError> {
    const <%= field.fieldNameCapitalized %>Input.pure() : super.pure(<%- field.defaultValue %>);
    const <%= field.fieldNameCapitalized %>Input.dirty([<%= field.fieldType %> value = <%- field.defaultValue %>]) : super.dirty(value);

    @override
    <%= field.fieldNameCapitalized %>ValidationError? validator(<%= field.fieldType %> value) {
      if (!value.isFinite) {
        return <%= field.fieldNameCapitalized %>ValidationError.invalid;
      } else if (value.isNegative) {
        return <%= field.fieldNameCapitalized %>ValidationError.invalid;
      }
      return null;
    }
  }
  <%_ } else if(field.fieldType === 'String') { _%>
    enum <%= field.fieldNameCapitalized %>ValidationError { invalid, length }

    extension <%= field.fieldNameCapitalized %>ValidationErrorMessage on <%= field.fieldNameCapitalized %>ValidationError {
      String invalidMessage() {
        switch (this) {
          case <%= field.fieldNameCapitalized %>ValidationError.invalid:
            return 'El <%= field.fieldNameHumanized %> no es valido:\n\t${MessageValidation.soloLetras}';
          case <%= field.fieldNameCapitalized %>ValidationError.length:
            return 'El <%= field.fieldNameHumanized %> no es valido:\n\t${MessageValidation.minimoCaracteres}';
        }
      }
    }

    class <%= field.fieldNameCapitalized %>Input extends FormzInput<<%= field.fieldType %>, <%= field.fieldNameCapitalized %>ValidationError> {
      const <%= field.fieldNameCapitalized %>Input.pure() : super.pure(<%- field.defaultValue %>);
      const <%= field.fieldNameCapitalized %>Input.dirty([<%= field.fieldType %> value = <%- field.defaultValue %>]) : super.dirty(value);
      static const minLength = 3;

      @override
      <%= field.fieldNameCapitalized %>ValidationError? validator(<%= field.fieldType %> value) {
        if (value.length < minLength) {
          return <%= field.fieldNameCapitalized %>ValidationError.length;
        }else if(!value.isAlphabet()){
          return <%= field.fieldNameCapitalized %>ValidationError.invalid;
        }
        return null;
      }
    }
    <%_ } else { _%>
      enum <%= field.fieldNameCapitalized %>ValidationError { invalid }

      class <%= field.fieldNameCapitalized %>Input extends FormzInput<<%= field.fieldType %>, <%= field.fieldNameCapitalized %>ValidationError> {
        const <%= field.fieldNameCapitalized %>Input.pure() : super.pure(<%- field.defaultValue %>);
        const <%= field.fieldNameCapitalized %>Input.dirty([<%= field.fieldType %> value = <%- field.defaultValue %>]) : super.dirty(value);

        @override
        <%= field.fieldNameCapitalized %>ValidationError? validator(<%= field.fieldType %> value) {
          return null;
        }
      }
<%_ } _%>
<%_ }); _%>
