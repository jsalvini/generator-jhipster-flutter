<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
_%>
part of '<%= entityFileName %>_bloc.dart';

abstract class <%= entityClass %>Event extends Equatable {
  const <%= entityClass %>Event();

  @override
  List<Object> get props => [];

  @override
  bool get stringify => true;
}

class RowsPerPageChanged extends <%= entityClass %>Event {
  final int rowsPerPage;

  const RowsPerPageChanged({required this.rowsPerPage});
}

class InitialRowChanged extends <%= entityClass %>Event {
  final int initialRow;

  const InitialRowChanged({required this.initialRow});
}

class SortChanged extends <%= entityClass %>Event {
  final String columnName;
  final int sortColumnIndex;
  final bool sortAscending;

  const SortChanged(
      {required this.sortColumnIndex,
      required this.sortAscending,
      required this.columnName});
}

class CurrentPageChanged extends <%= entityClass %>Event {
  final int currentPage;

  const CurrentPageChanged({required this.currentPage});
}

class Load<%= entityClass %>List extends <%= entityClass %>Event {
  final int page;
  final String sort;
  final String ascending;

  const Load<%= entityClass %>List(
      {required this.page, required this.sort, required this.ascending});

  @override
  List<Object> get props => [page, sort, ascending];
}

<%_ fields.forEach(field => { _%>
class <%= entityClass %><%= field.fieldNameCapitalized %>Changed extends <%= entityClass %>Event {
  <%_ if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
  final String <%= field.fieldName %>;
  <%_ } else { _%>
  final <%= field.fieldType %> <%= field.fieldName %>;
  <%_ } _%>
  const <%= entityClass %><%= field.fieldNameCapitalized %>Changed({required this.<%= field.fieldName %>});

  @override
  List<Object> get props => [<%= field.fieldName %>];
}
<%_ }); _%>

<%_ relationships.forEach(relationship => { %>
<%_ if(!relationship.isList) { _%>
class <%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed extends <%= entityClass %>Event {
  final <%= relationship.otherEntityNameCapitalized %> <%= relationship.otherEntityName %>;

  const <%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed({required this.<%= relationship.otherEntityName %>});

  @override
  List<Object> get props => [<%= relationship.otherEntityName %>];
}
<%_ } _%>
<%_ }); _%>

class <%= entityClass %>FormSubmitted extends <%= entityClass %>Event {}

class Load<%= entityClass %>ByIdForEdit extends <%= entityClass %>Event {
  final int? id;

  const Load<%= entityClass %>ByIdForEdit({required this.id});

  @override
  List<Object> get props => [id as int];
}

class Delete<%= entityClass %>ById extends <%= entityClass %>Event {
  final int? id;

  const Delete<%= entityClass %>ById({required this.id});

  @override
  List<Object> get props => [id as int];
}

class Load<%= entityClass %>ByIdForView extends <%= entityClass %>Event {
  final int? id;

  const Load<%= entityClass %>ByIdForView({required this.id});

  @override
  List<Object> get props => [id as int];
}
