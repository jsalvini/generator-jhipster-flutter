<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClass = context.entityClass;
const entityClassPluralLowered = context.entityClassPluralLowered;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
const enableTranslation = context.enableTranslation;
const hasDateTime = context.hasDateTime;
const idField = context.idField;
_%>
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/widgets.dart';
import 'package:formz/formz.dart';
<%_ if(hasDateTime) { _%>
import 'package:intl/intl.dart';
<%_ } _%>
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/<%= entityFileName %>_repository.dart';
<%_ if(enableTranslation) { _%>
import 'package:<%= baseName %>/generated/l10n.dart';
<%_ } _%>
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

part '<%= entityFileName %>_events.dart';
part '<%= entityFileName %>_state.dart';

class <%= entityClass %>Bloc extends Bloc<<%= entityClass %>Event, <%= entityClass %>State> {
  final <%= entityClass %>Repository _<%= entityInstance %>Repository;

  <%_ fields.forEach(field => { _%>
    <%_ if(!field.fieldIsEnum && field.fieldType !== 'bool') { _%>
  final <%= field.fieldName %>Controller = TextEditingController();
    <%_ } _%>
  <%_ }); _%>

  <%= entityClass %>Bloc({required <%= entityClass %>Repository <%= entityInstance %>Repository}) :
        _<%= entityInstance %>Repository = <%= entityInstance %>Repository,
   <%_ if(hasDateTime) { _%>
   super(<%= entityClass %>State(
	<%_ fields.forEach(field => { _%>
		<%_ if(field.fieldType === 'DateTime') { _%>
			<%= field.fieldName %>: <%= entityClass %><%= field.fieldNameCapitalized %>Input.pure(DateTime.now()),
		<%_ } _%>
	<%_ }); _%>)){
	<%_ } else { _%>
	  super(const <%= entityClass %>State()){
	<%_ } _%>
    on<Load<%= entityClass %>List>(onLoad<%= entityClass %>);
    on<<%= entityClass %>FormSubmitted>(onSubmit);
    on<Load<%= entityClass %>ByIdForEdit>(onLoad<%= entityClass %>IdForEdit);
    on<Delete<%= entityClass %>ById>(onDelete<%= entityClass %>Id);
    on<Load<%= entityClass %>ByIdForView>(onLoad<%= entityClass %>IdForView);
	<%_ fields.forEach(field => { _%>
    on<<%= entityClass %><%= field.fieldNameCapitalized %>Changed> (on<%= entityClass %><%= field.fieldNameCapitalized %>Changed);
	<%_ }); _%>
    on<RowsPerPageChanged>(onRowsPerPageChanged);
    on<InitialRowChanged>(onInitialRowChanged);
    on<SortChanged>(onSortChanged);
    on<CurrentPageChanged>(onCurrentPageChanged);
  }

  void onRowsPerPageChanged(
    RowsPerPageChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(rowsPerPage: event.rowsPerPage),
    );
  }

  void onInitialRowChanged(
    InitialRowChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(initialRow: event.initialRow),
    );
  }

  void onSortChanged(
    SortChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(
        columnName: event.columnName,
        sortColumnIndex: event.sortColumnIndex,
        sortAscending: event.sortAscending,
      ),
    );
  }

  void onCurrentPageChanged(
    CurrentPageChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(currentPage: event.currentPage),
    );
  }

  Future<void> onLoad<%= entityClass %>(
    Load<%= entityClass %>List event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    emit(state.copyWith(
          <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.loading,
        ));
    <%= entityClass %>Response <%= entityInstance %>Response = await _<%= entityInstance %>Repository.getAll<%= entityClassPlural %>(
      page: event.page,
      sort: event.sort,
      ascending: event.ascending,
      );
    List<<%= entityClass %>>? <%= entityClassPluralLowered %> = <%= entityInstance %>Response.<%= entityClassPluralLowered %>;

    emit(state.copyWith(
          <%= entityClassPluralLowered %>: <%= entityClassPluralLowered %>,
          totalRow: <%= entityInstance %>Response.totalCount,
          <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.done,
        ));
  }

  Future<void> onSubmit(
    <%= entityClass %>FormSubmitted event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    if (state.isValid) {
      emit(state.copyWith(
            formStatus: FormzSubmissionStatus.inProgress,
          ));
      try {
        <%= entityClass %> new<%= entityClass %>;

        if (state.editMode) {
            new<%= entityClass %> = <%= entityClass %>(
            <%= idField.fieldName %>: state.loaded<%= entityClass %>.id,
            <%_ fields.forEach(field => { _%>
              <%= field.fieldName %>: state.<%= field.fieldName %>.value,
                <%_ }); _%>
              <%_ relationships.forEach(relationship => { _%>
                <%= relationship.relationshipFieldName %>: null,
            <%_ }); _%>
          );

          // ignore: unused_local_variable
          <%= entityClass %>? result = await _<%= entityInstance %>Repository.update(
            new<%= entityClass %>, state.loaded<%= entityClass %>.id!);
        } else {
          new<%= entityClass %> = <%= entityClass %>(
            <%= idField.fieldName %>: null,
            <%_ fields.forEach(field => { _%>
              <%= field.fieldName %>: state.<%= field.fieldName %>.value,
                <%_ }); _%>
              <%_ relationships.forEach(relationship => { _%>
                <%= relationship.relationshipFieldName %>: null,
              <%_ }); _%>
            );
          // ignore: unused_local_variable
          <%= entityClass %>? result = await _<%= entityInstance %>Repository.create(new<%= entityClass %>);
        }
        add(const Load<%= entityClass %>List(page: 0, sort: 'id', ascending: 'asc'));
        emit(state.copyWith(
              formStatus: FormzSubmissionStatus.success,
              generalNotificationKey: HttpUtils.successResult,
            ));
      } catch (e) {
        emit(state.copyWith(
            formStatus: FormzSubmissionStatus.failure,
            generalNotificationKey: HttpUtils.errorServerKey));
      }
    }
  }

  Future<void> onLoad<%= entityClass %>IdForEdit(
    Load<%= entityClass %>ByIdForEdit event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    emit(state.copyWith(<%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.loading));
    <%= entityClass %>? loaded<%= entityClass %> = await _<%= entityInstance %>Repository.get<%= entityClass %>(event.id);

	if (loaded<%= entityClass %> != null) {
	    <%_ fields.forEach(field => { _%>
			<%_ if(field.fieldType === 'DateTime') { _%>
				final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> <%_ if(field.fieldValidateRules != 'required') { _%>?? DateTime.now()<%_ } _%>));
        <%_ } else if (field.fieldIsEnum) {_%>
        final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> ?? <%= field.fieldType %>.<%= field.fieldValues.split(',')[0] %>));
        <%_  } else { _%>
				final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> <%_ if(field.fieldValidateRules != 'required') { _%>?? <%- field.defaultValue %><%_ } _%>));
			<%_ } _%>
		<%_ }); _%>
		emit(state.copyWith(
          loaded<%= entityClass %>: loaded<%= entityClass %>,
          editMode: true,
          <%_ fields.forEach(field => { _%>
            <%= field.fieldName %>: <%= field.fieldName %>,
          <%_ }); _%>
          <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.done,
        ));
	<%_ fields.forEach(field => { _%>
		<%_ if(field.fieldType === 'DateTime') { _%>
		<%= field.fieldName %>Controller.text = DateFormat("yyyy-MM-dd").format(loaded<%= entityClass %>.<%= field.fieldName %><%_ if(field.fieldValidateRules != 'required') { _%>!<%_ } _%>);
			<%_  } else if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
		<%= field.fieldName %>Controller.text = loaded<%= entityClass %>.<%= field.fieldName %><%_ if(field.fieldValidateRules != 'required') { _%>!<%_ } _%>.toString();
			<%_ } else if (!field.fieldIsEnum && field.fieldType !== 'bool') { _%>
		<%= field.fieldName %>Controller.text = loaded<%= entityClass %>.<%= field.fieldName %><%_ if(field.fieldValidateRules != 'required') { _%>!<%_ } _%>;
			<%_ } _%>
	<%_ }); _%>
	}
  }

  Future<void> onDelete<%= entityClass %>Id(
    Delete<%= entityClass %>ById event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    try {
      String result = await _<%= entityInstance %>Repository.delete(event.id!);
      if (result.compareTo('OK') == 0) {
        add(Load<%= entityClass %>List(page: 0, sort: 'id', ascending: 'asc'));
        emit(state.copyWith(
            deleteStatus: <%= entityClass %>DeleteStatus.ok,
            generalNotificationKey: '<%= entityClass %> id ${event.id} eliminado correctamente.'));
      } else {
        emit(state.copyWith(
              deleteStatus: <%= entityClass %>DeleteStatus.error,
              generalNotificationKey: result,
            ));
      }
    } catch (e) {
      emit(state.copyWith(
            deleteStatus: <%= entityClass %>DeleteStatus.error,
            generalNotificationKey: HttpUtils.errorServerKey,
          ));
    }
    emit(state.copyWith(
          deleteStatus: <%= entityClass %>DeleteStatus.none,
        ));
  }

  Future<void> onLoad<%= entityClass %>IdForView(
    Load<%= entityClass %>ByIdForView event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    emit(state.copyWith(
          <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.loading,
        ));
    try {
        <%= entityClass %>? loaded<%= entityClass %> =
          await _<%= entityInstance %>Repository.get<%= entityClass %>(event.id);
      emit(state.copyWith(
            loaded<%= entityClass %>: loaded<%= entityClass %>,
            <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.done,
          ));
    } catch (e) {
      emit(state.copyWith(
            loaded<%= entityClass %>: null,
            <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.error,
          ));
    }
  }

  <%_ fields.forEach(field => { _%>
    void on<%= entityClass %><%= field.fieldNameCapitalized %>Changed (
      <%= entityClass %><%= field.fieldNameCapitalized %>Changed event,
      Emitter<<%= entityClass %>State> emit,
    ) {
      final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty(event.<%= field.fieldName %>);
      emit(state.copyWith(
            <%= field.fieldName %>: <%= field.fieldName %>,
            formStatus: FormzSubmissionStatus.initial,
            isValid: Formz.validate([
            <%_ fields.forEach(fieldValidation => { _%>
                <%_ if(field.fieldName === fieldValidation.fieldName) { _%>
                <%= field.fieldName %>,
                <%_ } else { _%>
                    state.<%= fieldValidation.fieldName %>,
                <%_ } _%>
              <%_ }); _%>
            ]),
          ));
        }
  <%_ }); _%>

    @override
    Future<void> close() {
      <%_ fields.forEach(field => { _%>
        <%_ if(!field.fieldIsEnum && field.fieldType !== 'bool') { _%>
            <%= field.fieldName %>Controller.dispose();
        <%_ } _%>
      <%_ }); _%>
      return super.close();
    }

}