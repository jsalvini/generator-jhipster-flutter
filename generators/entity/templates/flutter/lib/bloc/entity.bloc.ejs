<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClass = context.entityClass;
const entityClassPluralLowered = context.entityClassPluralLowered;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
const enableTranslation = context.enableTranslation;
const hasDateTime = context.hasDateTime;
const idField = context.idField;
_%>
import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:flutter/widgets.dart';
import 'package:formz/formz.dart';
<%_ if(hasDateTime) { _%>
import 'package:intl/intl.dart';
<%_ } _%>
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/<%= entityFileName %>_repository.dart';
<%_ relationships.forEach(relationship => { %>
<%_ if(!relationship.isList) { _%>
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/models/<%= relationship.otherEntityFileName %>_models.dart';
<%_ } _%>
<%_ }); _%>
<%_ if(enableTranslation) { _%>
import 'package:<%= baseName %>/generated/l10n.dart';
<%_ } _%>
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

part '<%= entityFileName %>_events.dart';
part '<%= entityFileName %>_state.dart';

class <%= entityClass %>Bloc extends Bloc<<%= entityClass %>Event, <%= entityClass %>State> {
  final <%= entityClass %>Repository _<%= entityInstance %>Repository;

  <%_ fields.forEach(field => { _%>
    <%_ if(!field.fieldIsEnum && field.fieldType !== 'bool') { _%>
  final <%= field.fieldName %>Controller = TextEditingController();
    <%_ } _%>
  <%_ }); _%>

  <%= entityClass %>Bloc({required <%= entityClass %>Repository <%= entityInstance %>Repository}) :
        _<%= entityInstance %>Repository = <%= entityInstance %>Repository,
   <%_ if(hasDateTime) { _%>
   super(<%= entityClass %>State(
	<%_ fields.forEach(field => { _%>
		<%_ if(field.fieldType === 'DateTime') { _%>
			<%= field.fieldName %>: <%= entityClass %><%= field.fieldNameCapitalized %>Input.pure(DateTime.now()),
		<%_ } _%>
	<%_ }); _%>)){
	<%_ } else { _%>
	  super(const <%= entityClass %>State()){
	<%_ } _%>
    on<Load<%= entityClass %>List>(onLoad<%= entityClass %>);
    on<<%= entityClass %>FormSubmitted>(onSubmit);
    on<Load<%= entityClass %>ByIdForEdit>(onLoad<%= entityClass %>IdForEdit);
    on<Delete<%= entityClass %>ById>(onDelete<%= entityClass %>Id);
    on<Load<%= entityClass %>ByIdForView>(onLoad<%= entityClass %>IdForView);
	<%_ fields.forEach(field => { _%>
    on<<%= entityClass %><%= field.fieldNameCapitalized %>Changed> (on<%= entityClass %><%= field.fieldNameCapitalized %>Changed);
	<%_ }); _%>
    on<RowsPerPageChanged>(onRowsPerPageChanged);
    on<InitialRowChanged>(onInitialRowChanged);
    on<SortChanged>(onSortChanged);
    on<CurrentPageChanged>(onCurrentPageChanged);
    <%_ relationships.forEach(relationship => { %>
    <%_ if(!relationship.isList) { _%>
    on<<%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed>(on<%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed);
    <%_ } _%>
    <%_ }); _%>
  }

  <%_ relationships.forEach(relationship => { %>
  <%_ if(!relationship.isList) { _%>
  void on<%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed(
    <%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(state.copyWith(
      <%= relationship.otherEntityName %>: event.<%= relationship.otherEntityName %>,
      formStatus: FormzSubmissionStatus.initial,
    ));
  }
  <%_ } _%>
  <%_ }); _%>

  void onRowsPerPageChanged(
    RowsPerPageChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(rowsPerPage: event.rowsPerPage),
    );
  }

  void onInitialRowChanged(
    InitialRowChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(initialRow: event.initialRow),
    );
  }

  void onSortChanged(
    SortChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(
        columnName: event.columnName,
        sortColumnIndex: event.sortColumnIndex,
        sortAscending: event.sortAscending,
      ),
    );
  }

  void onCurrentPageChanged(
    CurrentPageChanged event,
    Emitter<<%= entityClass %>State> emit,
  ) {
    emit(
      state.copyWith(currentPage: event.currentPage),
    );
  }

  Future<void> onLoad<%= entityClass %>(
    Load<%= entityClass %>List event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    emit(state.copyWith(
          <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.loading,
        ));
    final result = await _<%= entityInstance %>Repository.getAll<%= entityClassPlural %>(
      page: event.page,
      sort: event.sort,
      ascending: event.ascending,
      );

    result.fold(
      (Failure failure) {
        emit(
          state.copyWith(
              <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.error,
              generalNotificationKey: failure.errorMessage),
        );
      },
      (<%= entityClass %>Response data) {
        List<<%= entityClass %>>? <%= entityClassPluralLowered %> = data.<%= entityClassPluralLowered %>;

        emit(
          state.copyWith(
            <%= entityClassPluralLowered %>: <%= entityClassPluralLowered %>,
            totalRow: data.totalCount,
            <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.done,
          ),
        );
      },
    );
  }

  Future<void> onSubmit(
    <%= entityClass %>FormSubmitted event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    if (state.isValid) {
      emit(state.copyWith(
            formStatus: FormzSubmissionStatus.inProgress,
          ));

      <%= entityClass %> new<%= entityClass %>;
      Either<Failure, <%= entityClass %>?> result;

      if (state.editMode) {
        new<%= entityClass %> = <%= entityClass %>(
          <%= idField.fieldName %>: state.loaded<%= entityClass %>.id,
          <%_ fields.forEach(field => { _%>
            <%_ if(field.fieldType === 'double') { _%>
              <%= field.fieldName %>: <%_ if(field.fieldValidateRules != 'required') { _%>
              state.<%= field.fieldName %>.value.isNotEmpty ? double.parse(state.<%= field.fieldName %>.value) : null,
              <%_ } else { _%>
              double.parse(state.<%= field.fieldName %>.value),
              <%_ } _%>
            <%_ } else if(field.fieldType === 'int') { _%>
              <%= field.fieldName %>: <%_ if(field.fieldValidateRules != 'required') { _%>
              state.<%= field.fieldName %>.value.isNotEmpty ? int.parse(state.<%= field.fieldName %>.value) : null,
              <%_ } else { _%>
              int.parse(state.<%= field.fieldName %>.value),
              <%_ } _%>
            <%_ } else { _%>
            <%= field.fieldName %>: state.<%= field.fieldName %>.value,
            <%_ } _%>
          <%_ }); _%>
          <%_ relationships.forEach(relationship => { _%>
            <%= relationship.relationshipFieldName %>: state.<%= relationship.relationshipFieldName %>.id != null ? state.<%= relationship.relationshipFieldName %> : null,
          <%_ }); _%>
        );
        result = await _<%= entityInstance %>Repository.update(
          new<%= entityClass %>,
          state.loaded<%= entityClass %>.id!,
        );
      } else {
        new<%= entityClass %> = <%= entityClass %>(
          <%= idField.fieldName %>: null,
          <%_ fields.forEach(field => { _%>
            <%_ if(field.fieldType === 'double') { _%>
              <%= field.fieldName %>: <%_ if(field.fieldValidateRules != 'required') { _%>
              state.<%= field.fieldName %>.value.isNotEmpty ? double.parse(state.<%= field.fieldName %>.value) : null,
              <%_ } else { _%>
              double.parse(state.<%= field.fieldName %>.value),
              <%_ } _%>
            <%_ } else if(field.fieldType === 'int') { _%>
              <%= field.fieldName %>: <%_ if(field.fieldValidateRules != 'required') { _%>
              state.<%= field.fieldName %>.value.isNotEmpty ? int.parse(state.<%= field.fieldName %>.value) : null,
              <%_ } else { _%>
              int.parse(state.<%= field.fieldName %>.value),
              <%_ } _%>
            <%_ } else { _%>
            <%= field.fieldName %>: state.<%= field.fieldName %>.value,
            <%_ } _%>
          <%_ }); _%>
          <%_ relationships.forEach(relationship => { _%>
          <%= relationship.relationshipFieldName %>: state.<%= relationship.relationshipFieldName %>.id != null ? state.<%= relationship.relationshipFieldName %> : null,
          <%_ }); _%>
          );
        result = await _<%= entityInstance %>Repository.create(new<%= entityClass %>);
      }
      result.fold(
        (Failure failure) {
          emit(
            state.copyWith(
              <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.error,
              generalNotificationKey: failure.errorMessage),
          );
        },
        (<%= entityClass %>? data) {
          add(const Load<%= entityClass %>List(page: 0, sort: 'id', ascending: 'asc'));
          emit(state.copyWith(
                <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.ok,
                generalNotificationKey: state.editMode ? '<%= entityClass %> actualizada correctamente.' : '<%= entityClass %> agregada correctamente.',
          ));
        },
      );
    }
  }

  Future<void> onLoad<%= entityClass %>IdForEdit(
    Load<%= entityClass %>ByIdForEdit event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    emit(state.copyWith(<%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.loading));
    final result = await _<%= entityInstance %>Repository.get<%= entityClass %>(event.id);
    result.fold(
      (Failure failure) {
        emit(
          state.copyWith(
            <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.error,
              generalNotificationKey: failure.errorMessage,
            ),
        );
      },
      (<%= entityClass %>? data) {
        <%= entityClass %>? loaded<%= entityClass %> = data;

        if (loaded<%= entityClass %> != null) {
          <%_ fields.forEach(field => { _%>
              <%_ if(field.fieldType === 'DateTime') { _%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> <%_ if(field.fieldValidateRules != 'required') { _%> ?? DateTime.now()<%_ } _%>));
              <%_ } else if (field.fieldIsEnum) {_%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> ?? <%= field.fieldType %>.<%= field.fieldValues.split(',')[0] %>));
              <%_ } else if(field.fieldType === 'double' || field.fieldType === 'int') { _%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((<%_ if(field.fieldValidateRules != 'required') { _%> loaded<%= entityClass %>.<%= field.fieldName %>?.toString() ?? ''<%_ } else { _%> loaded<%= entityClass %>.<%= field.fieldName %>.toString() <%_ } _%> ));
              <%_ } else { _%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> <%_ if(field.fieldValidateRules != 'required') { _%> ?? <%- field.defaultValue %><%_ } _%>));
              <%_ } _%>
          <%_ }); _%>
          emit(state.copyWith(
            loaded<%= entityClass %>: loaded<%= entityClass %>,
            <%_ relationships.forEach(relationship => { _%>
              <%= relationship.relationshipFieldName %>: loaded<%= entityClass %>.<%= relationship.relationshipFieldName %>,
            <%_ }); _%>
            editMode: true,
            <%_ fields.forEach(field => { _%>
              <%= field.fieldName %>: <%= field.fieldName %>,
            <%_ }); _%>
            <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.done,
          ));
          <%_ fields.forEach(field => { _%>
          <%_ if(field.fieldType === 'DateTime') { _%>
          <%= field.fieldName %>Controller.text = DateFormat("yyyy-MM-dd").format(loaded<%= entityClass %>.<%= field.fieldName %> ?? DateTime.now());
          <%_  } else if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
          <%= field.fieldName %>Controller.text = <%_ if(field.fieldValidateRules != 'required') { _%>loaded<%= entityClass %>.<%= field.fieldName %> != null ? loaded<%= entityClass %>.<%= field.fieldName %>!.toString() : ''<%_ } else { _%> loaded<%= entityClass %>.<%= field.fieldName %>.toString()<%_ } _%>;
          <%_ } else if (!field.fieldIsEnum && field.fieldType !== 'bool') { _%>
          <%= field.fieldName %>Controller.text = loaded<%= entityClass %>.<%= field.fieldName %> ?? '';
          <%_ } _%>
          <%_ }); _%>
        }
      },
    );
  }

  Future<void> onDelete<%= entityClass %>Id(
    Delete<%= entityClass %>ById event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    final result = await _<%= entityInstance %>Repository.delete(event.id!);
    result.fold(
      (Failure failure) {
        emit(state.copyWith(
          deleteStatus: <%= entityClass %>DeleteStatus.error,
          generalNotificationKey: failure.errorMessage,
        ));
      },
      (String data) {
        add(const Load<%= entityClass %>List(page: 0, sort: 'id', ascending: 'asc'));
        emit(state.copyWith(
            deleteStatus: <%= entityClass %>DeleteStatus.none,
            generalNotificationKey:
                '<%= entityClass %> id ${event.id} eliminado correctamente.'));
      },
    );
  }

  Future<void> onLoad<%= entityClass %>IdForView(
    Load<%= entityClass %>ByIdForView event,
    Emitter<<%= entityClass %>State> emit,
  ) async {
    emit(state.copyWith(
    <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.loading,
    ));

    final result = await _<%= entityInstance %>Repository.get<%= entityClass %>(event.id);
    result.fold(
      (Failure failure) {
        emit(
          state.copyWith(
            <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.error,
              generalNotificationKey: failure.errorMessage,
            ),
        );
      },
      (<%= entityClass %>? data) {
        <%= entityClass %>? loaded<%= entityClass %> = data;

        if (loaded<%= entityClass %> != null) {
          <%_ fields.forEach(field => { _%>
            <%_ if(field.fieldType === 'DateTime') { _%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> <%_ if(field.fieldValidateRules != 'required') { _%>?? DateTime.now()<%_ } _%>));
              <%_ } else if (field.fieldIsEnum) {_%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> ?? <%= field.fieldType %>.<%= field.fieldValues.split(',')[0] %>));
              <%_ } else if (field.fieldType === 'int' || field.fieldType === 'double') { _%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((<%_ if(field.fieldValidateRules != 'required') { _%> loaded<%= entityClass %>.<%= field.fieldName %>?.toString() ?? ''<%_ } else { _%> loaded<%= entityClass %>.<%= field.fieldName %>.toString() <%_ } _%> ));
              <%_  } else { _%>
              final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty((loaded<%= entityClass %>.<%= field.fieldName %> <%_ if(field.fieldValidateRules != 'required') { _%>?? <%- field.defaultValue %><%_ } _%>));
            <%_ } _%>
          <%_ }); _%>
          emit(state.copyWith(
            loaded<%= entityClass %>: loaded<%= entityClass %>,
            <%_ relationships.forEach(relationship => { _%>
              <%= relationship.relationshipFieldName %>: loaded<%= entityClass %>.<%= relationship.relationshipFieldName %>,
            <%_ }); _%>
            <%_ fields.forEach(field => { _%>
              <%= field.fieldName %>: <%= field.fieldName %>,
            <%_ }); _%>
            <%= entityInstance %>StatusUI: <%= entityClass %>StatusUI.done,
          ));
          <%_ fields.forEach(field => { _%>
          <%_ if(field.fieldType === 'DateTime') { _%>
          <%= field.fieldName %>Controller.text = DateFormat("yyyy-MM-dd").format(loaded<%= entityClass %>.<%= field.fieldName %> ?? DateTime.now());
          <%_  } else if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
          <%= field.fieldName %>Controller.text = <%_ if(field.fieldValidateRules != 'required') { _%>loaded<%= entityClass %>.<%= field.fieldName %> != null ? loaded<%= entityClass %>.<%= field.fieldName %>!.toString() : ''<%_ } else { _%> loaded<%= entityClass %>.<%= field.fieldName %>.toString()<%_ } _%>;
          <%_ } else if (!field.fieldIsEnum && field.fieldType !== 'bool') { _%>
          <%= field.fieldName %>Controller.text = loaded<%= entityClass %>.<%= field.fieldName %> ?? '';
          <%_ } _%>
          <%_ }); _%>
        }
      },
    );
  }

  <%_ fields.forEach(field => { _%>
    void on<%= entityClass %><%= field.fieldNameCapitalized %>Changed (
      <%= entityClass %><%= field.fieldNameCapitalized %>Changed event,
      Emitter<<%= entityClass %>State> emit,
    ) {
      final <%= field.fieldName %> = <%= entityClass %><%= field.fieldNameCapitalized %>Input.dirty(event.<%= field.fieldName %>);
      emit(state.copyWith(
            <%= field.fieldName %>: <%= field.fieldName %>,
            formStatus: FormzSubmissionStatus.initial,
            isValid: Formz.validate([
            <%_ fields.forEach(fieldValidation => { _%>
                <%_ if(field.fieldName === fieldValidation.fieldName) { _%>
                <%= field.fieldName %>,
                <%_ } else { _%>
                    state.<%= fieldValidation.fieldName %>,
                <%_ } _%>
              <%_ }); _%>
            ]),
          ));
        }
  <%_ }); _%>

    @override
    Future<void> close() {
      <%_ fields.forEach(field => { _%>
        <%_ if(!field.fieldIsEnum && field.fieldType !== 'bool') { _%>
            <%= field.fieldName %>Controller.dispose();
        <%_ } _%>
      <%_ }); _%>
      return super.close();
    }

}