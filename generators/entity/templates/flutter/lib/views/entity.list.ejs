<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const enableTranslation = context.enableTranslation;
const fields = context.fields;
_%>

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_model.dart';
import 'package:<%= baseName %>/shared/widgets/loading_indicator_widget.dart';
import '../../../shared/widgets/drawer_widget.dart';
import '../<%= entityFileName %>_routes.dart';
import '<%= entityFileName %>_table.dart';
<%_ if(enableTranslation) { _%>
import 'package:<%= baseName %>/generated/l10n.dart';
<%_ } _%>

class <%= entityClass %>ListScreen extends StatelessWidget {
    <%= entityClass %>ListScreen({Key? key}) : super(key: <%= entityClass %>Routes.listScreenKey);
  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    return  BlocListener<<%= entityClass %>Bloc, <%= entityClass %>State>(
      listener: (context, state) {
        if(state.deleteStatus == <%= entityClass %>DeleteStatus.ok ||
            state.deleteStatus == <%= entityClass %>DeleteStatus.error) {
		Color colorBackground = Colors.green;
		IconData iconData = Icons.info_outline_rounded;
		if (state.deleteStatus == <%= entityClass %>DeleteStatus.error) {
            colorBackground = Colors.red;
            iconData = Icons.dangerous_outlined;
        }

	    ScaffoldMessenger.of(context)
			..hideCurrentSnackBar()
			..showSnackBar(
        SnackBar(
          showCloseIcon: true,
          closeIconColor: Colors.white,
          duration: const Duration(seconds: 10),
          content: Row(
            children: [
              Icon(iconData, color: Colors.white),
              const SizedBox(width: 10),
              Flexible(
                child: Text(
                  state.generalNotificationKey,
                  maxLines: 4,
                  overflow: TextOverflow.ellipsis,
                  style: const TextStyle(color: Colors.white),
                ),
              ),
            ],
          ),
          backgroundColor: colorBackground,
        ),
			);
        }
      },
      child: Scaffold(
        key: scaffoldKey,
        appBar: AppBar(
          centerTitle: true,
          title: const Text(
            '<%= entityClassPlural %>',
            style: TextStyle(color: Colors.white),
          ),
        ),
        body: const <%= entityClass %>View(),
        drawer: const <%= camelizedUpperFirstBaseName %>Drawer(),
		  ),
    );
  }
}

class <%= entityClass %>View extends StatelessWidget {
  const <%= entityClass %>View({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(builder: (context, state) {
      switch (state.<%= entityInstance %>StatusUI) {
        case <%= entityClass %>StatusUI.done:
          List<<%= entityClass %>> <%= entityInstance %>List = state.<%= entityClassPluralLowered %>;
          return <%= entityClass %>Table(
            <%= entityClassPluralLowered %>: <%= entityInstance %>List,
            blocContext: context,
          );
        case <%= entityClass %>StatusUI.loading:
          return const LoadingIndicator();
        case <%= entityClass %>StatusUI.error:
          return ErrorView(message: state.generalNotificationKey);
        default:
          return const LoadingIndicator();
      }
    });
  }
}