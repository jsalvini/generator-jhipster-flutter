<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const enableTranslation = context.enableTranslation;
const fields = context.fields;
_%>

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_model.dart';
import 'package:<%= baseName %>/shared/widgets/loading_indicator_widget.dart';
import '../../../shared/widgets/drawer_widget.dart';
import '../<%= entityFileName %>_routes.dart';
<%_ if(enableTranslation) { _%>
import 'package:<%= baseName %>/generated/l10n.dart';
<%_ } _%>

class <%= entityClass %>ListScreen extends StatelessWidget {
    <%= entityClass %>ListScreen({Key? key}) : super(key: <%= entityClass %>Routes.listScreenKey);
  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    return  BlocListener<<%= entityClass %>Bloc, <%= entityClass %>State>(
      listener: (context, state) {
        if(state.deleteStatus == <%= entityClass %>DeleteStatus.ok ||
            state.deleteStatus == <%= entityClass %>DeleteStatus.error) {
		Color colorBackground = Colors.green;
		IconData iconData = Icons.info_outline_rounded;
		if (state.deleteStatus == <%= entityClass %>DeleteStatus.error) {
            colorBackground = Colors.red;
            iconData = Icons.dangerous_outlined;
        }

	    ScaffoldMessenger.of(context)
			..hideCurrentSnackBar()
			..showSnackBar(
			SnackBar(
				content: Row(
				children: [
					Icon(iconData, color: Colors.white),
					const SizedBox(width: 10),
					Flexible(
					child: Text(
						state.generalNotificationKey,
						maxLines: 4,
						overflow: TextOverflow.ellipsis,
						style: const TextStyle(color: Colors.white),
					),
					),
				],
				),
				backgroundColor: colorBackground,
			),
			);
        }
      },
      child: Scaffold(
          key: scaffoldKey,
          appBar: AppBar(
		    backgroundColor: Theme.of(context).colorScheme.primaryContainer,
            centerTitle: true,
			title: const Text(<%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>ListTitle<%_ } else { _%> '<%= entityClassPlural %> List'  <%_ } _%>),
			actions: [
            Padding(
              padding: const EdgeInsets.only(right: 10),
              child: IconButton(
                onPressed: () => context.pushNamed('<%= entityInstance %>create'),
                icon: const Icon(Icons.add),
              ),
            ),
           ],
          ),
          body: const <%= entityClass %>View(),
          drawer: const <%= camelizedUpperFirstBaseName %>Drawer(),
		),
    );
  }
}

class <%= entityClass %>View extends StatelessWidget {
  const <%= entityClass %>View({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(builder: (context, state) {
      if (state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.done) {
        List<<%= entityClass %>> <%= entityInstance %>List = state.<%= entityClassPluralLowered %>;
        return ListView.builder(
            itemCount: <%= entityInstance %>List.length,
            itemBuilder: (context, index) {
              return <%= entityClass %>Card(
                <%= entityInstance %>: <%= entityInstance %>List[index],
                blocContext: context,
              );
            });
      }
      if (state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.loading) {
        return const LoadingIndicator();
      }
      return const CircularProgressIndicator();
    });
  }
}

class <%= entityClass %>Card extends StatelessWidget {
  const <%= entityClass %>Card({
    super.key,
    required this.<%= entityInstance %>,
    required this.blocContext,
  });

  final <%= entityClass %> <%= entityInstance %>;
  final BuildContext blocContext;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 100),
      child: Card(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: SizedBox(
            width: MediaQuery.of(context).size.width * 0.80,
            child: Column(
              children: <Widget>[
                ListTile(
                  leading: Icon(
                    Icons.account_circle,
                    size: 60.0,
                    color: Theme.of(context).colorScheme.primaryContainer,
                  ),
			      <%_ for (let i = 0; i < 2 && i < fields.length ; i++) { _%>
					<%_ if(i === 0) { _%>
						title: Text('<%= fields[i].fieldNameHumanized %> : ${<%= entityInstance %>.<%= fields[i].fieldName %>.toString()}'),
					<%_ } else { _%>
						subtitle: Text('<%= fields[i].fieldNameHumanized %> : ${<%= entityInstance %>.<%= fields[i].fieldName %>.toString()}'),
					<%_ } _%>
				  <%_ } _%>
                  trailing: DropdownButton(
                      icon: const Icon(Icons.more_vert),
                      onChanged: (String? newValue) {
                        switch (newValue) {
                          case "Edit":
                            context.pushNamed('<%= entityInstance %>edit',
                                extra: <%= entityInstance %>.id);
                            break;
                          case "Delete":
                            showDialog(
                              context: context,
                              builder: (BuildContext context) {
                                return DeleteDialog(
                                  id: <%= entityInstance %>.id,
                                  blocContext: blocContext,
                                );
                              },
                            );
                        }
                      },
                      items: const [
                        DropdownMenuItem<String>(
                          value: 'Edit',
                          child: Text('Edit'),
                        ),
                        DropdownMenuItem<String>(
                          value: 'Delete',
                          child: Text('Delete'),
                        )
                      ]),
                  selected: false,
                  onTap: () =>
                      context.pushNamed('<%= entityInstance %>view', extra: <%= entityInstance %>.id),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class DeleteDialog extends StatelessWidget {
  const DeleteDialog({
    super.key,
    required this.id,
    required this.blocContext,
  });

  final int? id;
  final BuildContext blocContext;

  @override
  Widget build(BuildContext context) {
    <%= entityClass %>Bloc <%= entityInstance %>Bloc = blocContext.read<<%= entityClass %>Bloc>();

    return BlocProvider<<%= entityClass %>Bloc>.value(
      value: <%= entityInstance %>Bloc,
      child: AlertDialog(
        title: const Text(<%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>DeletePopupTitle<%_ } else { _%>'Delete <%= entityClassPlural %>'<%_ } _%>),
        content: const Text(<%_ if(enableTranslation) { _%>S.of(context).entityActionConfirmDelete<%_ } else { _%>'Are you sure?'<%_ } _%>),
        actions: <Widget>[
           TextButton(
            child: const Text(<%_ if(enableTranslation) { _%>S.of(context).entityActionConfirmDeleteYes<%_ } else { _%>'Yes'<%_ } _%>),
            onPressed: () {
              <%= entityInstance %>Bloc.add(Delete<%= entityClass %>ById(id: id));
              context.pop();
            },
          ),
           TextButton(
            child: const Text(<%_ if(enableTranslation) { _%>S.of(context).entityActionConfirmDeleteNo<%_ } else { _%>'No'<%_ } _%>),
            onPressed: () {
              context.pop();
            },
          ),
        ],
      ),
    );
  }
}
