<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const enableTranslation = context.enableTranslation;
const fields = context.fields;
_%>

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:<%= baseName %>/core/constants/app_data.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_model.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/views/<%= entityFileName %>_table.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
import '../<%= entityFileName %>_routes.dart';

class <%= entityClass %>ListScreen extends StatelessWidget {
    <%= entityClass %>ListScreen({Key? key}) : super(key: <%= entityClass %>Routes.listScreenKey);
  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    return  BlocListener<<%= entityClass %>Bloc, <%= entityClass %>State>(
      listener: (context, state) {
        if(state.deleteStatus == <%= entityClass %>DeleteStatus.ok ||
            state.deleteStatus == <%= entityClass %>DeleteStatus.error ||
            state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.error) {
		Color backgroundColor = Colors.green;
		IconData iconData = Icons.info_outline_rounded;
		if (state.deleteStatus == <%= entityClass %>DeleteStatus.error ||
        state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.error) {
            backgroundColor = Colors.red;
            iconData = Icons.dangerous_outlined;
        }

	    ScaffoldMessenger.of(context)
			..hideCurrentSnackBar()
			..showSnackBar(
            getSnack(
              context: context,
              message: state.generalNotificationKey,
              backgroundColor: backgroundColor,
              iconData: iconData,
            ),
          );
        }
      },
      child: Scaffold(
        key: scaffoldKey,
        appBar: CustomAppBar(
          title: AppData.name,
        ),
        drawer: const CustomDrawer(),
        body: CustomLayout(
          title: Text(
            '<%= entityClass %>',
            style: Theme.of(context).textTheme.displayMedium,
          ),
          widgets: const [
          <%= entityClass %>View(),
          ],
        ),
      ),
    );
  }
}

class <%= entityClass %>View extends StatelessWidget {
  const <%= entityClass %>View({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(builder: (context, state) {
      List<<%= entityClass %>> <%= entityInstance %>List = state.<%= entityClassPluralLowered %>;
      switch (state.<%= entityInstance %>StatusUI) {
        case <%= entityClass %>StatusUI.done:
        case <%= entityClass %>StatusUI.error:
          return <%= entityClass %>Table(
            <%= entityClassPluralLowered %>: <%= entityInstance %>List,
          );
        case <%= entityClass %>StatusUI.loading:
          return const LoadingIndicator(
            message: 'CARGANDO',
          );
        default:
          return const LoadingIndicator(
            message: 'CARGANDO',
          );
      }
    });
  }
}