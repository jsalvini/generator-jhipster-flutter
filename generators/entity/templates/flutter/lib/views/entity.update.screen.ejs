<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
const enableTranslation = context.enableTranslation;
const hasDateTime = context.hasDateTime;
_%>

import 'package:flutter/material.dart';
import 'package:formz/formz.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
<%_ if(hasDateTime) { _%>
import 'package:datetime_picker_formfield_new/datetime_picker_formfield.dart';
import 'package:intl/intl.dart';
<%_ } _%>
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
import '../<%= entityFileName %>_routes.dart';

class <%= entityClass %>UpdateScreen extends StatelessWidget {
  const <%= entityClass %>UpdateScreen({Key? key}) : super(key: <%= entityClass %>Routes.editScreenKey);

  @override
  Widget build(BuildContext context) {
    return BlocListener<<%= entityClass %>Bloc, <%= entityClass %>State>(
      listener: (context, state) {
        if(state.formStatus == FormzSubmissionStatus.success){
		  context.pushNamed('<%= entityFileName %>');
        }
      },
      child: Scaffold(
          appBar: AppBar(
		    backgroundColor: Theme.of(context).colorScheme.primaryContainer,
            centerTitle: true,
            title: BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
                buildWhen: (previous, current) => previous.editMode != current.editMode,
                builder: (context, state) {
                	String title = state.editMode == true ? <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>UpdateTitle<%_ } else { _%>'Edit <%= entityClass %>'<%_ } _%> : <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>CreateTitle<%_ } else { _%>'Create <%=entityClass%>'<%_ } _%>;
                	return Text(title);
                }
            ),
          ),
          body: const SingleChildScrollView(
            padding: EdgeInsets.all(15.0),
            child: Column(
				children: <Widget>[
					Form<%= entityClass %>(),
				],
			),
          ),
      ),
    );
  }
}

class Form<%= entityClass %> extends StatelessWidget {
  const Form<%= entityClass %>({super.key});

  @override
  Widget build(BuildContext context) {
	return const Padding(
		padding: EdgeInsets.only(top: 30),
		child: Center(
		  child: SizedBox(
			width: 600,
			child: Form(
			  child: Wrap(runSpacing: 15, children: <Widget>[
				<%_ fields.forEach(field => { _%>
				<%= field.fieldNameCapitalized %>Field(),
				<%_ }); _%>
				SubmitForm(),
			  ]),
			),
		  ),
		),
	  );
  }
}

class SubmitForm extends StatelessWidget {
  const SubmitForm({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		builder: (context, state) {
		  return Padding(
			padding: const EdgeInsets.only(top: 30),
			child: Row(
			  mainAxisAlignment: MainAxisAlignment.center,
			  children: [
				ElevatedButton(
				  onPressed: state.isValid
					  ? () =>
						  context.read<<%= entityClass %>Bloc>().add(<%= entityClass %>FormSubmitted())
					  : null,
				  child: SizedBox(
					  width: MediaQuery.of(context).size.width * 0.2,
					  height: 50,
					  child: Center(
						child: Visibility(
						  replacement: const CircularProgressIndicator(),
						  visible: !(state.formStatus == FormzSubmissionStatus.inProgress),
						  child: const Text('SAVE'),
						),
					  )),
				),
			  ],
			),
		  );
    });
  }
}



<%_ fields.forEach(field => { _%>
<%_ if(field.fieldType === 'DateTime') { _%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
			buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
			builder: (context, state) {
			  return DateTimeField(
				controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
				onChanged: (value) {
				  context
					  .read<<%= entityClass %>Bloc>()
					  .add(<%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value!));
				},
				format: DateFormat("yyyy-MM-dd"),
				keyboardType: TextInputType.datetime,
				decoration: const InputDecoration(labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameCapitalized %>Field<%_ } else { _%>'<%= field.fieldName %>'<%_ } _%>,),
				onShowPicker: (context, currentValue) async {
				  return await showDatePicker(
					  locale: const Locale(<%_ if(enableTranslation) { _%>S.of(context).locale<%_ } else { _%>'en'<%_ } _%>),
					  context: context,
					  firstDate: DateTime(1950),
					  initialDate: currentValue ?? DateTime.now(),
					  lastDate: DateTime(2100));
			    },
			  );
			});
		}
}
<%_ } else if (field.fieldIsEnum) {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
		  return Padding(
			padding: const EdgeInsets.only(left: 3.0),
			child: Row(
			  mainAxisAlignment: MainAxisAlignment.start,
			  const SizedBox(width: 10),
			  children: <Widget>[
				Text(<%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameHumanized %>Field<%_ } else { _%>'<%= field.fieldNameHumanized %>'<%_ } _%>, style: Theme.of(context).textTheme.bodyLarge,),
				DropdownButton<<%= field.fieldType %>>(
					value: state.<%= field.fieldName %>.value,
					onChanged: (value) { context.read<<%= entityClass %>Bloc>().add(<%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value!)); },
					items: createDropdown<%= field.fieldType %>Items(<%= field.fieldType %>.values)),
			  ],
			),
		  );
		});
	}

	<%_ fields.forEach(field => { _%>
		<%_ if(field.fieldIsEnum) { _%>
		  List<DropdownMenuItem<<%= field.fieldType %>>> createDropdown<%= field.fieldType %>Items(List<<%= field.fieldType %>> <%= field.fieldName %>s) {
			List<DropdownMenuItem<<%= field.fieldType %>>> <%= field.fieldName %>DropDown = [];

			for (<%= field.fieldType %> <%= field.fieldName %> in <%= field.fieldName %>s) {
			  DropdownMenuItem<<%= field.fieldType %>> dropdown = DropdownMenuItem<<%= field.fieldType %>>(
				  value: <%= field.fieldName %>,
				  child: Text(<%= field.fieldNameHumanized %>.toString()));
				  <%= field.fieldName %>DropDown.add(dropdown);
			}

			return <%= field.fieldName %>DropDown;
		  }
		<%_ } _%>
	<%_ }); _%>
  }
<%_ } else if (field.fieldType === 'bool') {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

  const <%= field.fieldNameCapitalized %>Field({super.key});

  @override
  Widget build(BuildContext context) {
	  return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
	  buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
	  builder: (context, state) {
		return Padding(
		  padding: const EdgeInsets.only(left: 3.0),
		  child: Row(
			mainAxisAlignment: MainAxisAlignment.start,
			children: <Widget>[
			  Text(<%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameHumanized %>Field<%_ } else { _%>'<%= field.fieldNameHumanized %>'<%_ } _%>, style: Theme.of(context).textTheme.bodyLarge,),
			  const SizedBox(width: 10),
			  Switch(
				  value: state.<%= field.fieldName %>.value,
				  onChanged: (value) { context.read<<%= entityClass %>Bloc>().add(<%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value)); },
				  activeColor: Theme.of(context).primaryColor,
				  ),
			],
		  ),
		);
	  });
  }
}
<%_ } else if(field.fieldType === 'int' ) {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
		return TextFormField(
		  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
		  onChanged: (value) { context.read<<%= entityClass %>Bloc>()
			.add(<%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: <%_ if(field.fieldType === 'int') { _%> int.tryParse(value) ?? -1 <%_ } else { _%> value <%_ } _%>)); },
		  keyboardType: TextInputType.number,
		  decoration: InputDecoration(
			  labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameHumanized %>Field<%_ } else { _%>'<%= field.fieldNameHumanized %>'<%_ } _%>,
			  helperText: MessageValidation.numerosEnteros,
			  labelStyle: const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
		      contentPadding: const EdgeInsets.symmetric(vertical: 10),
			  errorText: state.<%= field.fieldName %>.displayError != null
                  ? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
                  : null,
			  ),
		    );
		}
	);
}
}
<%_ } else if(field.fieldType === 'double' ) {_%>
	class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

		const <%= field.fieldNameCapitalized %>Field({super.key});

		@override
		Widget build(BuildContext context) {
			return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
			buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
			builder: (context, state) {
			return TextFormField(
			  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
			  onChanged: (value) { context.read<<%= entityClass %>Bloc>()
				.add(<%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: <%_ if(field.fieldType === 'double') { _%> double.tryParse(value) ?? -1 <%_ } else { _%> value <%_ } _%>)); },
			  keyboardType: TextInputType.number,
			  decoration: InputDecoration(
				  labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameHumanized %>Field<%_ } else { _%>'<%= field.fieldNameHumanized %>'<%_ } _%>,
				  helperText: MessageValidation.numerosDecimales,
				  labelStyle: const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
				  contentPadding: const EdgeInsets.symmetric(vertical: 10),
				  errorText: state.<%= field.fieldName %>.displayError != null
					  ? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
					  : null,
				  ),
				);
			}
		);
	}
}
<%_ } else  {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
		return TextFormField(
			controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
			onChanged: (value) { context.read<<%= entityClass %>Bloc>()
			.add(<%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value)); },
			keyboardType: TextInputType.text,
			decoration: InputDecoration(
				labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameHumanized %>Field<%_ } else { _%>'<%= field.fieldNameHumanized %>'<%_ } _%>,
				helperText: '${MessageValidation.soloLetras}\n${MessageValidation.minimoCaracteres}',
				labelStyle: const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
				contentPadding: const EdgeInsets.symmetric(vertical: 10),
				errorText: state.<%= field.fieldName %>.displayError != null
					? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
					: null,
				),
			);
		}
	);
	}
	}
<%_ } _%>
<%_ }); _%>
