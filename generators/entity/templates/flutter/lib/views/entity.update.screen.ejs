<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
const enableTranslation = context.enableTranslation;
const hasDateTime = context.hasDateTime;
_%>

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:formz/formz.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
<%_ if(hasDateTime) { _%>
import 'package:intl/intl.dart';
<%_ } _%>
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:form_builder_validators/form_builder_validators.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/core/constants/constants.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
<%_ relationships.forEach(relationship => { %>
<%_ if(!relationship.isList) { _%>
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/bloc/<%= relationship.otherEntityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/models/<%= relationship.otherEntityFileName %>_models.dart';
<%_ } _%>
<%_ }); _%>
import '../<%= entityFileName %>_routes.dart';

class <%= entityClass %>UpdateScreen extends StatelessWidget {
  const <%= entityClass %>UpdateScreen({Key? key}) : super(key: <%= entityClass %>Routes.editScreenKey);

  @override
  Widget build(BuildContext context) {
    return BlocListener<<%= entityClass %>Bloc, <%= entityClass %>State>(
      listener: (context, state) {
        if (state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.ok ||
            state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.error) {
          Color backgroundColor = Colors.green;
          IconData iconData = Icons.info_outline_rounded;
          if (state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.error) {
            backgroundColor = Colors.red;
            iconData = Icons.dangerous_outlined;
          }

          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(
				getSnack(
					context: context,
					message: state.generalNotificationKey,
					backgroundColor: backgroundColor,
					iconData: iconData,
				  ),
            );
			context.pushNamed('<%= entityInstance %>');
        }
      },
	  child: Scaffold(
        appBar: CustomAppBar(
          title: AppData.name,
        ),
        body: CustomLayout(
          title: BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
            buildWhen: (previous, current) =>
                previous.editMode != current.editMode,
            builder: (context, state) {
				String title = state.editMode
				? <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>UpdateTitle<%_ } else { _%>'Editar <%= entityClass %>'<%_ } _%>
				: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>CreateTitle<%_ } else { _%>'Crear <%=entityClass%>'<%_ } _%>;
              return Text(
                title,
                style: Theme.of(context).textTheme.displayMedium,
              );
            },
          ),
          widgets: [
            SingleChildScrollView(
              child: Column(
                children: <Widget>[
                  Card(
                    elevation: 5,
                    shadowColor: Theme.of(context).colorScheme.primary,
                    surfaceTintColor: Theme.of(context).colorScheme.primary,
                    child: const Form<%= entityClass %>(),
                  ),
                ],
              ),
            )
          ],
        ),
      ),
    );
  }
}

class Form<%= entityClass %> extends StatelessWidget {
  const Form<%= entityClass %>({super.key});

  @override
  Widget build(BuildContext context) {
	return Padding(
		padding: const EdgeInsets.all(20),
		child: Center(
			child: Container(
				constraints: const BoxConstraints(
				  maxWidth: 600,
				),
				child: const Form(
					child: Column(
						children: <Widget>[
							<%_ fields.forEach(field => { _%>
							<%= field.fieldNameCapitalized %>Field(),
							SizedBox(height: 20),
							<%_ }); _%>
							<%_ relationships.forEach(relationship => { %>
							<%_ if(!relationship.isList) { _%>
							<%= relationship.otherEntityNameCapitalized %>Field(),
							SizedBox(height: 20),
							<%_ } _%>
							<%_ }); _%>
							SubmitForm(),
						],
					),
				),
			),
		),
	  );
  }
}

class SubmitForm extends StatelessWidget {
  const SubmitForm({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		builder: (context, state) {
			return state.formStatus.isInProgress
            ? const Padding(
                padding: EdgeInsets.only(top: 30),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                  ],
                ),
              )
            : Padding(
                padding: const EdgeInsets.only(top: 30),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    ElevatedButton(
                      key: const Key('<%= entityInstance %>Form_elevatedButton'),
                      onPressed: state.isValid
                          ? () => context.read<<%= entityClass %>Bloc>().add(<%= entityClass %>FormSubmitted())
                          : null,
                      style: ButtonStyle(
                        backgroundColor: WidgetStatePropertyAll(
                          state.isValid
                              ? Theme.of(context).colorScheme.primary
                              : Theme.of(context)
                                      .colorScheme
                                      .secondary
                                      .withOpacity(0.3),
                        ),
                      ),
                      child: SizedBox(
                        width: MediaQuery.of(context).size.width * 0.2,
                        height: 50,
                        child: const Center(
                          child: Text(
                            'Guardar',
                            style: TextStyle(color: Colors.white, fontSize: 18),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
            );
        },
	);
  }
}

<%_ fields.forEach(field => { _%>
<%_ const fieldOptions = field.options || {};_%>
<%_ if(field.fieldType === 'DateTime') { _%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
			buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
			builder: (context, state) {
				return Row(
					children: [
					  SizedBox(
						width: 130,
						child: Text('<%= field.fieldNameCapitalized %>',
							style: Theme.of(context).textTheme.headlineMedium),
					  ),
					  Expanded(
						child: FormBuilderDateTimePicker(
						  name: '<%= field.fieldName %>',
						  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
						  enabled: <%= !fieldOptions.readonly %>,
						  initialEntryMode: DatePickerEntryMode.calendar,
						  initialValue: state.loaded<%= entityClass %>.<%= field.fieldName %> ?? DateTime.now(),
						  format: DateFormat('yyyy-MM-dd HH:mm'),
						  inputType: InputType.both,
						  style: const TextStyle(
							color: Color(0xff1b070b),
							fontSize: 16,
						  ),
						  decoration: const InputDecoration(
							prefixIcon: Icon(Icons.date_range_rounded),
							<%_ if(!(field.fieldValidateRules != 'required')) { _%>
							helperText: MessageValidation.campoRequerido,
							<%_ } _%>
							hintText: 'Ejemplo: 2024-01-24',
						  ),
						  initialTime: const TimeOfDay(hour: 8, minute: 0),
						  keyboardType: TextInputType.datetime,
						  onChanged: (DateTime? newValue) {
							if (newValue != null) {
								String formattedDate =
									DateFormat("yyyy-MM-ddTHH:mm:ss.SSS'Z'")
										.format(newValue.toUtc());

								DateTime parsedDate =
									DateFormat("yyyy-MM-ddTHH:mm:ss.SSS'Z'")
										.parseUtc(formattedDate);

								context
								  .read<<%= entityClass %>Bloc>()
								  .add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: parsedDate));
							}
						  },
						  validator: FormBuilderValidators.compose(
							[
							  FormBuilderValidators.required(
								  errorText: '* Debe seleccionar un valor.'),
							],
						  ),
						),
					  ),
					],
				);
			}
		);
	}
}
<%_ } else if (field.fieldIsEnum) {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
			buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
			builder: (context, state) {
				return Row(
					children: [
						SizedBox(
							width: 150,
							child: Text(
								'<%= field.fieldNameCapitalized %>',
								style: Theme.of(context).textTheme.headlineMedium,
							),
						),
						Expanded(
							child: DropdownButtonFormField<<%= field.fieldType %>>(
									value: state.<%= field.fieldName %>.value,
									dropdownColor: Colors.white,
									icon: Icon(
										Icons.arrow_drop_down,
										color: Theme.of(context).primaryColor,
									),
									style: const TextStyle(
										color: Color(0xff1b070b),
										fontSize: 16,
									),
									<%_ if(fieldOptions.readonly) { %>
									onChanged: null,
									<%_ } else {_%>
									onChanged: (value) { context.read<<%= entityClass %>Bloc>().add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value!)); },
									<%_ } _%>
									items: createDropdown<%= field.fieldType %>Items(<%= field.fieldType %>.values),
								),
						),
					],
				);

			}
		);
	}

	<%_ fields.forEach(field => { _%>
		<%_ if(field.fieldIsEnum) { _%>
		  List<DropdownMenuItem<<%= field.fieldType %>>> createDropdown<%= field.fieldType %>Items(List<<%= field.fieldType %>> <%= field.fieldName %>s) {
			List<DropdownMenuItem<<%= field.fieldType %>>> <%= field.fieldName %>DropDown = [];

			for (<%= field.fieldType %> <%= field.fieldName %> in <%= field.fieldName %>s) {
			  DropdownMenuItem<<%= field.fieldType %>> dropdown = DropdownMenuItem<<%= field.fieldType %>>(
				  value: <%= field.fieldName %>,
				  child: Text(<%= field.fieldName %>.name),
			);
				  <%= field.fieldName %>DropDown.add(dropdown);
			}

			return <%= field.fieldName %>DropDown;
		  }
		<%_ } _%>
	<%_ }); _%>
  }
<%_ } else if (field.fieldType === 'bool') {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

  const <%= field.fieldNameCapitalized %>Field({super.key});

  @override
  Widget build(BuildContext context) {
	  return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
	  buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
	  builder: (context, state) {
		return Row(
			children: <Widget>[
			  SizedBox(
				width: 130,
				child: Text(
				  '<%= field.fieldNameCapitalized %>',
				  style: Theme.of(context).textTheme.headlineMedium,
				),
			  ),
			  Switch(
				value: state.<%= field.fieldName %>.value,
				<%_ if(fieldOptions.readonly) { %>
					onChanged: null,
					<%_ } else {_%>
					onChanged: (value) {
						context
						.read<<%= entityClass %>Bloc>()
						.add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value));
					},
					<%_ } _%>
				activeColor: Theme.of(context).primaryColor,
			  ),
			],
		  );
	    },
	);
  }
}
<%_ } else if(field.fieldType === 'int' ) {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
			return Row(
				children: [
				  SizedBox(
					width: 130,
					child: Text(
					  '<%= field.fieldNameCapitalized %>',
					  style: Theme.of(context).textTheme.headlineMedium,
					),
				  ),
				  Expanded(
					child: TextFormField(
						controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
						enabled: <%= !fieldOptions.readonly %>,
						onChanged: (value) {
							context
								.read<<%= entityClass %>Bloc>()
								.add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value));
						},
						keyboardType: const TextInputType.numberWithOptions(
							signed: false,
							decimal: false,
						),
						style: const TextStyle(
							color: Color(0xff1b070b),
							fontSize: 16,
						),
						maxLength: 15,
						inputFormatters: <TextInputFormatter>[
							LengthLimitingTextInputFormatter(15),
						],
						decoration: InputDecoration(
							prefixIcon: const Icon(Icons.numbers_rounded),
							<%_ if(!(field.fieldValidateRules != 'required')) { _%>
							helperText: MessageValidation.campoRequerido,
							<%_ } _%>
							hintText: 'Ejemplo: 99',
							errorMaxLines: 2,
							errorText: state.<%= field.fieldName %>.displayError != null
							? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
							: null,
						),
					),
				),
			],
			);
		}
	);
}
}
<%_ } else if(field.fieldType === 'double' ) {_%>
	class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

		const <%= field.fieldNameCapitalized %>Field({super.key});

		@override
		Widget build(BuildContext context) {
			return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
			buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
			builder: (context, state) {
				return Row(
					children: [
					  SizedBox(
						width: 130,
						child: Text(
						  '<%= field.fieldNameCapitalized %>',
						  style: Theme.of(context).textTheme.headlineMedium,
						),
					  ),
					  Expanded(
						child: TextFormField(
							controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
							enabled: <%= !fieldOptions.readonly %>,
							onChanged: (value) {
							  context.read<<%= entityClass %>Bloc>().add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value));
							},
							keyboardType: const TextInputType.numberWithOptions(
							  decimal: true,
							  signed: true,
							),
							style: const TextStyle(
								color: Color(0xff1b070b),
								fontSize: 16,
							),
							maxLength: 18,
							inputFormatters: <TextInputFormatter>[
								LengthLimitingTextInputFormatter(18),
							],
							decoration: InputDecoration(
								prefixIcon: const Icon(Icons.numbers_rounded),
								<%_ if(!(field.fieldValidateRules != 'required')) { _%>
								helperText: MessageValidation.campoRequerido,
								<%_ } _%>
								hintText: 'Ejemplo: -38.416097',
								errorMaxLines: 2,
								errorText: state.<%= field.fieldName %>.displayError != null
									? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
									: null,
							),
						),
					  ),
					],
				);
			},
		);
	}
}
<%_ } else  {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
			return Row(
				children: [
				  SizedBox(
					width: 130,
					child: Text(
					  '<%= field.fieldNameCapitalized %>',
					  style: Theme.of(context).textTheme.headlineMedium,
					),
				  ),
				  Expanded(
					child: TextFormField(
						controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
						enabled: <%= !fieldOptions.readonly %>,
						onChanged: (value) {
							context
								.read<<%= entityClass %>Bloc>()
								.add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value));
						},
						keyboardType: TextInputType.text,
						style: const TextStyle(
							color: Color(0xff1b070b),
							fontSize: 16,
						),
						<%_ if(field.fieldValidateRules == 'maxlength') { _%>
						maxLength: <%= field.fieldValidateRulesMaxlength %>,
						<%_ } _%>
						decoration: InputDecoration(
							prefixIcon: const Icon(Icons.text_fields_rounded),
							errorMaxLines: 2,
							errorText: state.<%= field.fieldName %>.displayError != null
									? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
									: null,
						),
					),
				  ),
				],
			  );
			}
		);
	}
}
<%_ } _%>
<%_ }); _%>

<%_ relationships.forEach(relationship => { %>
<%_ const fieldOptions = relationship.options || {};_%>
<%_ if(!relationship.isList) { _%>
class <%= relationship.otherEntityNameCapitalized %>Field extends StatelessWidget {
	const <%= relationship.otherEntityNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
	  return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		builder: (context, state) {
		  return BlocBuilder<<%= relationship.otherEntityNameCapitalized %>Bloc, <%= relationship.otherEntityNameCapitalized %>State>(
			builder: (context, state) {
			  if (state.<%= relationship.otherEntityName %>StatusUI == <%= relationship.otherEntityNameCapitalized %>StatusUI.done) {
				List<<%= relationship.otherEntityNameCapitalized %>> <%= relationship.otherEntityName %>List = state.<%= relationship.otherEntityNamePlural %>;

				<%= relationship.otherEntityNameCapitalized %> <%= relationship.otherEntityName %> =
				BlocProvider.of<<%= entityClass %>Bloc>(context)
										.state
										.<%= relationship.otherEntityName %>;
				return Row(
					children: <Widget>[
						SizedBox(
							width: 130,
							child: Text(
								'<%= relationship.otherEntityNameCapitalized %>',
								style: Theme.of(context).textTheme.headlineMedium,
							),
						),
						Expanded(
							child: DropdownButtonFormField<<%= relationship.otherEntityNameCapitalized %>>(
								dropdownColor: Colors.white,
								icon: Icon(
									Icons.arrow_drop_down,
									color: Theme.of(context).primaryColor,
								),
								style: const TextStyle(
									color: Color(0xff1b070b),
									fontSize: 16,
								),
								decoration: const InputDecoration(
									labelText: 'Seleccione <%= relationship.otherEntityName %>',
									labelStyle: TextStyle(
										height: 0.5,
										fontWeight: FontWeight.bold,
										fontSize: 16,
									),
									floatingLabelStyle: TextStyle(
										height: 0.5,
										fontSize: 18,
									),
								),
								value: <%= relationship.otherEntityName %>.id != null ? <%= relationship.otherEntityName %> : null,
								<%_ if(fieldOptions.readonly) { %>
								onChanged: null,
								<%_ } else {_%>
								onChanged: (value) {
									BlocProvider.of<<%= entityClass %>Bloc>(context)
										.add(<%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed(<%= relationship.otherEntityName %>: value!));
									},
								<%_ } _%>
								items: createDropdown<%= relationship.otherEntityNameCapitalizedPlural %>Items(<%= relationship.otherEntityName %>List),
							),
						),
					],
				);
			  }
			  if (BlocProvider.of<<%= relationship.otherEntityNameCapitalized %>Bloc>(context).state.<%= relationship.otherEntityName %>StatusUI ==
			  <%= relationship.otherEntityNameCapitalized %>StatusUI.loading) {
				return const LoadingIndicator(message: 'Cargando');
			  }
			  return const Center(child: CircularProgressIndicator());
			},
		  );
		},
	  );
	}
	List<DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>> createDropdown<%= relationship.otherEntityNameCapitalizedPlural %>Items(
		List<<%= relationship.otherEntityNameCapitalized %>> <%= relationship.otherEntityNamePlural %>) {

		//Filtro Comercios Habilitados
		//List<<%= relationship.otherEntityNameCapitalized %>> <%= relationship.otherEntityName %>Habilitados =
		//	<%= relationship.otherEntityNamePlural %>.where((item) => item.habilitado ?? false).toList();

		List<DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>> <%= relationship.otherEntityName %>DropDown = [];

		for (<%= relationship.otherEntityNameCapitalized %> <%= relationship.otherEntityName %> in <%= relationship.otherEntityNamePlural %>) {
			DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>> dropdown = DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>(
			value: <%= relationship.otherEntityName %>,
			child: Text('${<%= relationship.otherEntityName %>.<%=relationship.otherEntityField %>}'),
			);
			<%= relationship.otherEntityName %>DropDown.add(dropdown);
		}
	  	return <%= relationship.otherEntityName %>DropDown;
	}
}
<%_ } _%>
<%_ }); _%>