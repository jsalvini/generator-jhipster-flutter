<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
const enableTranslation = context.enableTranslation;
const hasDateTime = context.hasDateTime;
_%>

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:formz/formz.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
<%_ if(hasDateTime) { _%>
import 'package:datetime_picker_formfield_new/datetime_picker_formfield.dart';
import 'package:intl/intl.dart';
<%_ } _%>
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
<%_ relationships.forEach(relationship => { %>
<%_ if(!relationship.isList) { _%>
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/bloc/<%= relationship.otherEntityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/models/<%= relationship.otherEntityFileName %>_models.dart';
import 'package:<%= baseName %>/shared/widgets/loading_indicator_widget.dart';
<%_ } _%>
<%_ }); _%>
import '../<%= entityFileName %>_routes.dart';

class <%= entityClass %>UpdateScreen extends StatelessWidget {
  const <%= entityClass %>UpdateScreen({Key? key}) : super(key: <%= entityClass %>Routes.editScreenKey);

  @override
  Widget build(BuildContext context) {
    return BlocListener<<%= entityClass %>Bloc, <%= entityClass %>State>(
      listener: (context, state) {
        if (state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.ok ||
            state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.error) {
          Color colorBackground = Colors.green;
          IconData iconData = Icons.info_outline_rounded;
          if (state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.error) {
            colorBackground = Colors.red;
            iconData = Icons.dangerous_outlined;
          }

          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    Icon(iconData, color: Colors.white),
                    const SizedBox(width: 10),
                    Flexible(
                      child: Text(
                        state.generalNotificationKey,
                        maxLines: 4,
                        overflow: TextOverflow.ellipsis,
                        style: const TextStyle(color: Colors.white),
                      ),
                    ),
                  ],
                ),
                backgroundColor: colorBackground,
              ),
            );
			context.pushNamed('<%= entityInstance %>');
        }


      },
      child: Scaffold(
          appBar: AppBar(
            centerTitle: true,
            title: BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
                buildWhen: (previous, current) => previous.editMode != current.editMode,
                builder: (context, state) {
                	String title = state.editMode == true ? <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>UpdateTitle<%_ } else { _%>'Editar <%= entityClass %>'<%_ } _%> : <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>CreateTitle<%_ } else { _%>'Crear <%=entityClass%>'<%_ } _%>;
                	return Text(title);
                }
            ),
          ),
          body: SingleChildScrollView(
            padding: const EdgeInsets.all(15.0),
            child: Column(
				children: <Widget>[
					Card(
						elevation: 5,
						margin: const EdgeInsets.all(20),
						shadowColor: Theme.of(context).colorScheme.primary,
						child: const Form<%= entityClass %>(),
					),
				],
			),
          ),
      ),
    );
  }
}

class Form<%= entityClass %> extends StatelessWidget {
  const Form<%= entityClass %>({super.key});

  @override
  Widget build(BuildContext context) {
	return const Padding(
		padding: EdgeInsets.only(top: 30, bottom: 30),
		child: Center(
		  child: SizedBox(
			width: 600,
			child: Form(
			  child: Wrap(runSpacing: 15, children: <Widget>[
				<%_ fields.forEach(field => { _%>
				<%= field.fieldNameCapitalized %>Field(),
				<%_ }); _%>
				<%_ relationships.forEach(relationship => { %>
				<%_ if(!relationship.isList) { _%>
				<%= relationship.otherEntityNameCapitalized %>Field(),
				<%_ } _%>
				<%_ }); _%>
				SubmitForm(),
			  ]),
			),
		  ),
		),
	  );
  }
}

class SubmitForm extends StatelessWidget {
  const SubmitForm({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		builder: (context, state) {
			return state.formStatus.isInProgress
            ? const Padding(
                padding: EdgeInsets.only(top: 30),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                  ],
                ),
              )
            : Padding(
                padding: const EdgeInsets.only(top: 30),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    ElevatedButton(
                      key: const Key('<%= entityInstance %>Form_elevatedButton'),
                      onPressed: state.isValid
                          ? () => context.read<<%= entityClass %>Bloc>().add(<%= entityClass %>FormSubmitted())
                          : null,
                      style: ButtonStyle(
                        backgroundColor: MaterialStatePropertyAll(
                          state.isValid
                              ? context.read<ThemeBloc>().state ==
                                      ThemeMode.dark
                                  ? Theme.of(context)
                                      .colorScheme
                                      .secondaryContainer
                                  : Theme.of(context).colorScheme.primary
                              : context.read<ThemeBloc>().state ==
                                      ThemeMode.dark
                                  ? Theme.of(context)
                                      .colorScheme
                                      .primary
                                      .withOpacity(0.3)
                                  : Theme.of(context)
                                      .colorScheme
                                      .secondary
                                      .withOpacity(0.3),
                        ),
                      ),
                      child: SizedBox(
                        width: MediaQuery.of(context).size.width * 0.2,
                        height: 50,
                        child: const Center(
                          child: Text(
                            'Guardar',
                            style: TextStyle(color: Colors.white, fontSize: 18),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
            );
        },
	);
  }
}

<%_ fields.forEach(field => { _%>
<%_ const fieldOptions = field.options || {};_%>
<%_ if(field.fieldType === 'DateTime') { _%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
			buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
			builder: (context, state) {
			  return DateTimeField(
				controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
				enabled: <%= !fieldOptions.readonly %>,
				onChanged: (value) {
				  context
					  .read<<%= entityClass %>Bloc>()
					  .add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value!));
				},
				format: DateFormat("yyyy-MM-dd"),
				keyboardType: TextInputType.datetime,
				decoration: const InputDecoration(
					prefixIcon: Icon(Icons.date_range_rounded),
					labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameCapitalized %>Field<%_ } else { _%>'<%= field.fieldNameCapitalized %>'<%_ } _%>,
					<%_ if(!(field.fieldValidateRules != 'required')) { _%>
					helperText: MessageValidation.campoRequerido,
					<%_ } _%>
					hintText: 'Ejemplo: 2024-01-24',
					labelStyle: TextStyle(
						height: 0.5,
						fontWeight: FontWeight.bold,
						fontSize: 16,
					  ),
					  floatingLabelStyle: TextStyle(
						height: 0.5,
						fontWeight: FontWeight.bold,
						fontSize: 18,
					  ),
					),
				onShowPicker: (context, currentValue) async {
				  return await showDatePicker(
					  locale: const Locale(<%_ if(enableTranslation) { _%>S.of(context).locale<%_ } else { _%>'en'<%_ } _%>),
					  context: context,
					  firstDate: DateTime(1950),
					  initialDate: currentValue ?? DateTime.now(),
					  lastDate: DateTime(2100));
			    },
			  );
			});
		}
}
<%_ } else if (field.fieldIsEnum) {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
			return Padding(
				padding: const EdgeInsets.only(top: 10),
				child: Row(
				  mainAxisAlignment: MainAxisAlignment.start,
				  children: [
					SizedBox(
					  width: 250,
					  child: DropdownButtonFormField<<%= field.fieldType %>>(
						  value: state.<%= field.fieldName %>.value,
						  dropdownColor: Colors.white,
						  icon: Icon(
							Icons.arrow_drop_down,
							color: Theme.of(context).primaryColor,
						  ),
						  style: const TextStyle(
							fontWeight: FontWeight.bold,
							fontSize: 16,
							color: Color(0xff49454f),
						  ),
						  decoration: const InputDecoration(
							labelText: 'Seleccione <%= field.fieldName %>',
							labelStyle: TextStyle(
							  height: 0.5,
							  fontWeight: FontWeight.bold,
							  fontSize: 16,
							),
							floatingLabelStyle: TextStyle(
							  height: 0.5,
							  fontSize: 18,
							),
						  ),
						  <%_ if(fieldOptions.readonly) { %>
						  onChanged: null,
						  <%_ } else {_%>
					  	  onChanged: (value) { context.read<<%= entityClass %>Bloc>().add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value!)); },
						  <%_ } _%>
						  items: createDropdown<%= field.fieldType %>Items(<%= field.fieldType %>.values)),
					),
				  ],
				),
			);
		});
	}

	<%_ fields.forEach(field => { _%>
		<%_ if(field.fieldIsEnum) { _%>
		  List<DropdownMenuItem<<%= field.fieldType %>>> createDropdown<%= field.fieldType %>Items(List<<%= field.fieldType %>> <%= field.fieldName %>s) {
			List<DropdownMenuItem<<%= field.fieldType %>>> <%= field.fieldName %>DropDown = [];

			for (<%= field.fieldType %> <%= field.fieldName %> in <%= field.fieldName %>s) {
			  DropdownMenuItem<<%= field.fieldType %>> dropdown = DropdownMenuItem<<%= field.fieldType %>>(
				  value: <%= field.fieldName %>,
				  child: Text(<%= field.fieldName %>.name),
			);
				  <%= field.fieldName %>DropDown.add(dropdown);
			}

			return <%= field.fieldName %>DropDown;
		  }
		<%_ } _%>
	<%_ }); _%>
  }
<%_ } else if (field.fieldType === 'bool') {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

  const <%= field.fieldNameCapitalized %>Field({super.key});

  @override
  Widget build(BuildContext context) {
	  return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
	  buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
	  builder: (context, state) {
		return Padding(
		  padding: const EdgeInsets.only(left: 3.0),
		  child: Row(
			mainAxisAlignment: MainAxisAlignment.start,
			children: <Widget>[
			  Text(<%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameCapitalized %>Field<%_ } else { _%>'<%= field.fieldNameCapitalized %>'<%_ } _%>,
				style: TextStyle(
					fontSize: 18,
					fontWeight: FontWeight.bold,
					color: Theme.of(context).colorScheme.onSurfaceVariant,
				),
			  ),
			  const SizedBox(width: 20),
			  Switch(
				  value: state.<%= field.fieldName %>.value,
				  <%_ if(fieldOptions.readonly) { %>
				  onChanged: null,
				  <%_ } else {_%>
				  onChanged: (value) { context.read<<%= entityClass %>Bloc>().add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value)); },
				  <%_ } _%>
				  activeColor: Theme.of(context).primaryColor,
				  ),
			],
		  ),
		);
	  });
  }
}
<%_ } else if(field.fieldType === 'int' ) {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
		return TextFormField(
		  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
		  enabled: <%= !fieldOptions.readonly %>,
		  onChanged: (value) {
			context.read<<%= entityClass %>Bloc>().add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value));
		  },
		  keyboardType: const TextInputType.numberWithOptions(
			signed: false,
			decimal: false,
		  ),
		  maxLength: 15,
		  inputFormatters: <TextInputFormatter>[
			LengthLimitingTextInputFormatter(15),
		  ],
		  decoration: InputDecoration(
			  prefixIcon: const Icon(Icons.numbers_rounded),
			  labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameCapitalized %>Field<%_ } else { _%>'<%= field.fieldNameCapitalized %>'<%_ } _%>,
			  <%_ if(!(field.fieldValidateRules != 'required')) { _%>
			  helperText: MessageValidation.campoRequerido,
			  <%_ } _%>
			  hintText: 'Ejemplo: 99',
			  labelStyle: const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
		      contentPadding: const EdgeInsets.symmetric(vertical: 10),
			  errorText: state.<%= field.fieldName %>.displayError != null
                  ? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
                  : null,
			  ),
		    );
		}
	);
}
}
<%_ } else if(field.fieldType === 'double' ) {_%>
	class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

		const <%= field.fieldNameCapitalized %>Field({super.key});

		@override
		Widget build(BuildContext context) {
			return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
			buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
			builder: (context, state) {
			return TextFormField(
			  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
			  enabled: <%= !fieldOptions.readonly %>,
			  onChanged: (value) {
				context.read<<%= entityClass %>Bloc>().add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value));
			  },
			  keyboardType: const TextInputType.numberWithOptions(
				decimal: true,
				signed: true,
			  ),
			  maxLength: 15,
			  inputFormatters: <TextInputFormatter>[
				LengthLimitingTextInputFormatter(15),
			  ],
			  decoration: InputDecoration(
				  prefixIcon: const Icon(Icons.numbers_rounded),
				  labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameCapitalized %>Field<%_ } else { _%>'<%= field.fieldNameCapitalized %>'<%_ } _%>,
				  <%_ if(!(field.fieldValidateRules != 'required')) { _%>
				  helperText: MessageValidation.campoRequerido,
				  <%_ } _%>
				  hintText: 'Ejemplo: 99.99',
				  labelStyle: const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
				  contentPadding: const EdgeInsets.symmetric(vertical: 10),
				  errorText: state.<%= field.fieldName %>.displayError != null
					  ? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
					  : null,
				  ),
			  );
			}
		);
	}
}
<%_ } else  {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

	const <%= field.fieldNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
		return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
		builder: (context, state) {
		return TextFormField(
			controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
			enabled: <%= !fieldOptions.readonly %>,
			onChanged: (value) { context.read<<%= entityClass %>Bloc>()
			.add(<%= entityClass %><%= field.fieldNameCapitalized %>Changed(<%= field.fieldName %>: value)); },
			keyboardType: TextInputType.text,
			<%_ if(field.fieldValidateRules == 'maxlength') { _%>
			maxLength: <%= field.fieldValidateRulesMaxlength %>,
			<%_ } _%>
			decoration: InputDecoration(
				prefixIcon: const Icon(Icons.text_fields_rounded),
				labelText: <%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %><%= field.fieldNameCapitalized %>Field<%_ } else { _%>'<%= field.fieldNameCapitalized %>'<%_ } _%>,
				labelStyle: const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
				contentPadding: const EdgeInsets.symmetric(vertical: 10),
				errorText: state.<%= field.fieldName %>.displayError != null
					? '${state.<%= field.fieldName %>.error?.invalidMessage()}'
					: null,
				),
			);
		}
	);
	}
	}
<%_ } _%>
<%_ }); _%>

<%_ relationships.forEach(relationship => { %>
<%_ const fieldOptions = relationship.options || {};_%>
<%_ if(!relationship.isList) { _%>
class <%= relationship.otherEntityNameCapitalized %>Field extends StatelessWidget {
	const <%= relationship.otherEntityNameCapitalized %>Field({super.key});

	@override
	Widget build(BuildContext context) {
	  return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
		builder: (context, state) {
		  return BlocBuilder<<%= relationship.otherEntityNameCapitalized %>Bloc, <%= relationship.otherEntityNameCapitalized %>State>(
			builder: (context, state) {
			  if (state.<%= relationship.otherEntityName %>StatusUI == <%= relationship.otherEntityNameCapitalized %>StatusUI.done) {
				List<<%= relationship.otherEntityNameCapitalized %>> <%= relationship.otherEntityName %>List = state.<%= relationship.otherEntityNamePlural %>;

				return Padding(
					padding: const EdgeInsets.only(top: 10),
				  child: Row(
					mainAxisAlignment: MainAxisAlignment.start,
					children: <Widget>[
					  SizedBox(
						width: 250,
						child: DropdownButtonFormField<<%= relationship.otherEntityNameCapitalized %>>(
							dropdownColor: Colors.white,
							icon: Icon(
							Icons.arrow_drop_down,
							color: Theme.of(context).primaryColor,
							),
							style: const TextStyle(
							fontWeight: FontWeight.bold,
							fontSize: 16,
							color: Color(0xff49454f),
							),
							decoration: const InputDecoration(
								labelText: 'Seleccione <%= relationship.otherEntityName %>',
								labelStyle: TextStyle(
									height: 0.5,
									fontWeight: FontWeight.bold,
									fontSize: 16,
								),
								floatingLabelStyle: TextStyle(
									height: 0.5,
									fontSize: 18,
								),
							),
							value: BlocProvider.of<<%= entityClass %>Bloc>(context)
										.state
										.<%= relationship.otherEntityName %>
										.id !=
									null
								? BlocProvider.of<<%= entityClass %>Bloc>(context)
									.state
									.<%= relationship.otherEntityName %>
								: null,
							<%_ if(fieldOptions.readonly) { %>
							onChanged: null,
							<%_ } else {_%>
							onChanged: (value) {
								BlocProvider.of<<%= entityClass %>Bloc>(context)
									.add(<%= entityClass %><%= relationship.otherEntityNameCapitalized %>Changed(<%= relationship.otherEntityName %>: value!));
								},
							<%_ } _%>
							items: createDropdown<%= relationship.otherEntityNameCapitalizedPlural %>Items(<%= relationship.otherEntityName %>List),
						),
				  	  ),
					],
				  ),
				);
			  }
			  if (BlocProvider.of<<%= relationship.otherEntityNameCapitalized %>Bloc>(context).state.<%= relationship.otherEntityName %>StatusUI ==
			  <%= relationship.otherEntityNameCapitalized %>StatusUI.loading) {
				return const LoadingIndicator();
			  }
			  return const Center(child: CircularProgressIndicator());
			},
		  );
		},
	  );
	}
	List<DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>> createDropdown<%= relationship.otherEntityNameCapitalizedPlural %>Items(
		List<<%= relationship.otherEntityNameCapitalized %>> <%= relationship.otherEntityNamePlural %>) {
	  List<DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>> <%= relationship.otherEntityName %>DropDown = [];

	  for (<%= relationship.otherEntityNameCapitalized %> <%= relationship.otherEntityName %> in <%= relationship.otherEntityNamePlural %>) {
		DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>> dropdown = DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>(
		  value: <%= relationship.otherEntityName %>,
		  child: Text('${<%= relationship.otherEntityName %>.<%=relationship.otherEntityField %>}'),
		);
		<%= relationship.otherEntityName %>DropDown.add(dropdown);
	  }
	  return <%= relationship.otherEntityName %>DropDown;
	}
  }
<%_ } _%>
<%_ }); _%>