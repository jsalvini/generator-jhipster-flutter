<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
const enableTranslation = context.enableTranslation;
const hasDateTime = context.hasDateTime;
_%>

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
<%_ if(hasDateTime) { _%>
import 'package:intl/intl.dart';
<%_ } _%>
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:flutter_json_view/flutter_json_view.dart';
import 'package:<%= baseName %>/core/constants/constants.dart';
import 'package:<%= baseName %>/shared/utils/utils.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_model.dart';
<%_ relationships.forEach(relationship => { %>
<%_ if(!relationship.isList) { _%>
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/bloc/<%= relationship.otherEntityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/models/<%= relationship.otherEntityFileName %>_models.dart';
<%_ } _%>
<%_ }); _%>
import '../<%= entityFileName %>_routes.dart';

class <%= entityClass %>ViewScreen extends StatelessWidget {
  const <%= entityClass %>ViewScreen({Key? key}) : super(key: <%= entityClass %>Routes.createScreenKey);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(
        title: AppData.name,
      ),
      body: CustomLayout(
        title: Text(
          'Detalle <%= entityInstance %>',
          style: Theme.of(context).textTheme.displayMedium,
        ),
        widgets: [
          SingleChildScrollView(
            child: BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
              buildWhen: (previous, current) =>
                  previous.loaded<%= entityClass %> != current.loaded<%= entityClass %>,
              builder: (context, state) {
                return Visibility(
                  visible: state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.done,
                  replacement: const LoadingIndicator(
                    message: 'CARGANDO',
                  ),
                  child: Column(
                    children: <Widget>[
                      Card(
                        elevation: 5,
                        shadowColor: Theme.of(context).colorScheme.primary,
                        surfaceTintColor: Theme.of(context).colorScheme.primary,
                        child: const Form<%= entityClass %>(),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class Form<%= entityClass %> extends StatelessWidget {
  const Form<%= entityClass %>({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Center(
        child: Container(
          constraints: const BoxConstraints(
            maxWidth: 600,
          ),
          child: Form(
            child: Column(
              children: <Widget>[
                <%_ fields.forEach(field => { _%>
                <%= field.fieldNameCapitalized %>Field(),
                SizedBox(height: 20),
                <%_ }); _%>
                <%_ relationships.forEach(relationship => { %>
                <%_ if(!relationship.isList) { _%>
                <%= relationship.otherEntityNameCapitalized %>Field(),
                SizedBox(height: 20),
                <%_ } _%>
                <%_ }); _%>
                EditButton(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class EditButton extends StatelessWidget {
  const EditButton({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
      buildWhen: (previous, current) =>
          previous.loaded<%= entityClass %>.id != current.loaded<%= entityClass %>.id,
      builder: (context, state) {
        return Padding(
          padding: const EdgeInsets.only(top: 30),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () => context.push('${<%= entityClass %>Routes.editPath}${ state.loaded<%= entityClass %>.id}'),
                style: ButtonStyle(
                    backgroundColor: WidgetStatePropertyAll(
                        Theme.of(context).primaryColor)),
                child: SizedBox(
                    width: MediaQuery.of(context).size.width * 0.2,
                    height: 50,
                    child: const Center(
                      child: Text(
                        'Editar',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 18,
                        ),
                      ),
                    ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

<%_ fields.forEach(field => { _%>
  <%_ if(field.fieldType === 'DateTime') { _%>
  class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

    const <%= field.fieldNameCapitalized %>Field({super.key});

    @override
    Widget build(BuildContext context) {
      return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
        buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
        builder: (context, state) {
          return Row(
            children: [
              SizedBox(
                width: 150,
                child: Text(
                  '<%= field.fieldNameCapitalized %>',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
              ),
              Expanded(
                child: FormBuilderDateTimePicker(
                  name: '<%= field.fieldName %>',
                  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
                  enabled: false,
                  initialEntryMode: DatePickerEntryMode.calendar,
                  initialValue: state.loaded<%= entityClass %>.<%= field.fieldName %>,
                  format: DateFormat('yyyy-MM-dd HH:mm'),
                  inputType: InputType.both,
                  style: const TextStyle(
                    color: Color(0xff1b070b),
                    fontSize: 16,
                  ),
                  decoration: const InputDecoration(
                    prefixIcon: Icon(Icons.date_range_rounded),
                  ),
                  initialTime: const TimeOfDay(hour: 8, minute: 0),
                  keyboardType: TextInputType.datetime,
                ),
              ),
            ],
          );
        }
      );
    }
  }
  <%_ } else if (field.fieldIsEnum) {_%>
  class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

    const <%= field.fieldNameCapitalized %>Field({super.key});

    @override
    Widget build(BuildContext context) {
      return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
        buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
        builder: (context, state) {
          return Row(
            children: [
              SizedBox(
                width: 150,
                child: Text(
                  '<%= field.fieldNameCapitalized %>',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
              ),
              Expanded(
                child: DropdownButtonFormField<<%= field.fieldType %>>(
                  value: state.<%= field.fieldName %>.value,
                  dropdownColor: Colors.white,
                  icon: Icon(
                    Icons.arrow_drop_down,
                    color: Theme.of(context).primaryColor,
                  ),
                  style: const TextStyle(
                    color: Color(0xff1b070b),
                    fontSize: 16,
                  ),
                  onChanged: null,
                  items: createDropdown<%= field.fieldType %>Items(<%= field.fieldType %>.values),
                ),
              ),
            ],
          );
        }
      );
    }

    <%_ fields.forEach(field => { _%>
      <%_ if(field.fieldIsEnum) { _%>
        List<DropdownMenuItem<<%= field.fieldType %>>> createDropdown<%= field.fieldType %>Items(List<<%= field.fieldType %>> <%= field.fieldName %>s) {
        List<DropdownMenuItem<<%= field.fieldType %>>> <%= field.fieldName %>DropDown = [];

        for (<%= field.fieldType %> <%= field.fieldName %> in <%= field.fieldName %>s) {
          DropdownMenuItem<<%= field.fieldType %>> dropdown = DropdownMenuItem<<%= field.fieldType %>>(
            value: <%= field.fieldName %>,
            child: Text(<%= field.fieldName %>.name),
        );
            <%= field.fieldName %>DropDown.add(dropdown);
        }
        return <%= field.fieldName %>DropDown;
        }
      <%_ } _%>
    <%_ }); _%>
    }
  <%_ } else if (field.fieldType === 'bool') {_%>
  class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

    const <%= field.fieldNameCapitalized %>Field({super.key});

    @override
    Widget build(BuildContext context) {
      return BlocBuilder<<%= entityClass %>Bloc,<%= entityClass %>State>(
        buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
        builder: (context, state) {
          return Row(
            children: <Widget>[
              SizedBox(
                width: 130,
                child: Text(
                  '<%= field.fieldNameCapitalized %>',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
              ),
              Switch(
                value: state.<%= field.fieldName %>.value,
                onChanged: null,
                activeColor: Theme.of(context).primaryColor,
              ),
            ],
          );
        }
      );
    }
  }
  <%_ } else if(field.fieldType === 'int' ) {_%>
  class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

    const <%= field.fieldNameCapitalized %>Field({super.key});

    @override
    Widget build(BuildContext context) {
      return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
        buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
        builder: (context, state) {
          return Row(
            children: [
              SizedBox(
                width: 150,
                child: Text(
                  '<%= field.fieldNameCapitalized %>',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
              ),
              Expanded(
                child: TextFormField(
                  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
                  readOnly: true,
                  keyboardType: const TextInputType.numberWithOptions(
                    signed: false,
                    decimal: false,
                  ),
                  style: const TextStyle(
                    color: Color(0xff1b070b),
                    fontSize: 16,
                  ),
                  inputFormatters: <TextInputFormatter>[
                    LengthLimitingTextInputFormatter(15),
                  ],
                  decoration: const InputDecoration(
                    prefixIcon: Icon(Icons.numbers_rounded),
                  ),
                ),
              ),
            ],
          );
        }
      );
    }
  }
  <%_ } else if(field.fieldType === 'double' ) {_%>
  class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

    const <%= field.fieldNameCapitalized %>Field({super.key});

    @override
    Widget build(BuildContext context) {
      return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
        buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
        builder: (context, state) {
          return Row(
            children: [
              SizedBox(
                width: 150,
                child: Text(
                  '<%= field.fieldNameCapitalized %>',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
              ),
              Expanded(
                child: TextFormField(
                  controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
                  readOnly: true,
                  keyboardType: const TextInputType.numberWithOptions(
                    decimal: true,
                    signed: true,
                  ),
                  style: const TextStyle(
                    color: Color(0xff1b070b),
                    fontSize: 16,
                  ),
                  inputFormatters: <TextInputFormatter>[
                    LengthLimitingTextInputFormatter(15),
                  ],
                  decoration: const InputDecoration(
                    prefixIcon: Icon(Icons.numbers_rounded),
                  ),
                ),
              ),
            ],
          );
        }
      );
    }
  }
<%_ } else  {_%>
class <%= field.fieldNameCapitalized %>Field extends StatelessWidget {

  const <%= field.fieldNameCapitalized %>Field({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
      buildWhen: (previous, current) => previous.<%= field.fieldName %> != current.<%= field.fieldName %>,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 150,
              child: Text(
                '<%= field.fieldNameCapitalized %>',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<<%= entityClass %>Bloc>().<%= field.fieldName %>Controller,
                readOnly: true,
                keyboardType: TextInputType.text,
                <%_ if(field.fieldValidateRules == 'maxlength') { _%>
                maxLength: <%= field.fieldValidateRulesMaxlength %>,
                <%_ } _%>
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.text_fields_rounded),
                ),
              ),
            ),
          ],
        );
      }
    );
  }
}
<%_ } _%>
<%_ }); _%>

<%_ relationships.forEach(relationship => { %>
  <%_ if(!relationship.isList) { _%>
  class <%= relationship.otherEntityNameCapitalized %>Field extends StatelessWidget {
    const <%= relationship.otherEntityNameCapitalized %>Field({super.key});

    @override
    Widget build(BuildContext context) {
      return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
        builder: (context, state) {

          return Row(
            mainAxisAlignment: MainAxisAlignment.start,
            children: <Widget>[
              SizedBox(
                width: 130,
                child: Text('<%= relationship.otherEntityNameCapitalized %>',
                    style: Theme.of(context).textTheme.headlineMedium),
              ),
              SizedBox(
                width: 250,
                child: DropdownButtonFormField<<%= relationship.otherEntityNameCapitalized %>>(
                  dropdownColor: Colors.white,
                  icon: Icon(
                    Icons.arrow_drop_down,
                    color: Theme.of(context).primaryColor,
                  ),
                  style: const TextStyle(
                    color: Color(0xff1b070b),
                    fontSize: 16,
                  ),
                  value: state
                        .<%= relationship.otherEntityName %>
                        .id !=
                      null
                    ? state
                      .<%= relationship.otherEntityName %>
                    : null,
                  onChanged: null,
                  items: [
                    if (state.<%= relationship.otherEntityName %>.id != null)
                      DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>(
                        value: state.<%= relationship.otherEntityName %>,
                        child: Text('${state.<%= relationship.otherEntityName %>.<%=relationship.otherEntityField %>}'),
                      )
                  ],
                ),
              ),
            ],
          );
        },
      );
    }
    List<DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>> createDropdown<%= relationship.otherEntityNameCapitalizedPlural %>Items(
      List<<%= relationship.otherEntityNameCapitalized %>> <%= relationship.otherEntityNamePlural %>) {
      List<DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>> <%= relationship.otherEntityName %>DropDown = [];

      for (<%= relationship.otherEntityNameCapitalized %> <%= relationship.otherEntityName %> in <%= relationship.otherEntityNamePlural %>) {
      DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>> dropdown = DropdownMenuItem<<%= relationship.otherEntityNameCapitalized %>>(
        value: <%= relationship.otherEntityName %>,
        child: Text('{<%= relationship.otherEntityName %>.<%=relationship.otherEntityField %>}'),
      );
      <%= relationship.otherEntityName %>DropDown.add(dropdown);
      }
      return <%= relationship.otherEntityName %>DropDown;
    }
    }
  <%_ } _%>
  <%_ }); _%>