<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const fields = context.fields;
const relationships = context.relationships;
const primaryKeyType = context.primaryKeyType;
const enableTranslation = context.enableTranslation;
const hasDateTime = context.hasDateTime;
_%>

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
<%_ if(hasDateTime) { _%>
import 'package:intl/intl.dart';
<%_ } _%>
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_model.dart';
import 'package:<%= baseName %>/shared/widgets/loading_indicator_widget.dart';
import '../<%= entityFileName %>_routes.dart';

class <%= entityClass %>ViewScreen extends StatelessWidget {
  const <%= entityClass %>ViewScreen({Key? key}) : super(key: <%= entityClass %>Routes.createScreenKey);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
          appBar: AppBar(
		    backgroundColor: Theme.of(context).colorScheme.primaryContainer,
            centerTitle: true,
            title: const Text(<%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>ViewTitle<%_ } else { _%>'<%= entityClassPlural %> View'<%_ } _%>),
          ),
          body: SingleChildScrollView(
            padding: const EdgeInsets.all(15.0),
            child: BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
              buildWhen: (previous, current) => previous.loaded<%= entityClass %> != current.loaded<%= entityClass %>,
              builder: (context, state) {
                return Visibility(
                  visible: state.<%= entityInstance %>StatusUI == <%= entityClass %>StatusUI.done,
                  replacement: const LoadingIndicator(),
                  child: Column(children: <Widget>[
                    <%= entityInstance %>Card(state.loaded<%= entityClass %>, context)
                  ]),
                );
              }
            ),
          ),
        floatingActionButton: FloatingActionButton(
          onPressed: () => context.pushNamed('<%= entityInstance %>create'),
          backgroundColor: Theme.of(context).primaryColor,
		  child: Icon(Icons.add, color: Theme.of(context).iconTheme.color,),
        )
    );
  }

  Widget <%= entityInstance %>Card(<%= entityClass %> <%= entityInstance %>, BuildContext context) {
    return Card(
      child: Container(
        padding: const EdgeInsets.all(20),
        width: MediaQuery.of(context).size.width * 0.90,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Text('<%= context.idField.fieldNameHumanized %> : ${<%= entityInstance %>.<%= context.idField.fieldName %>}', style: Theme.of(context).textTheme.bodyLarge,),
            <%_ fields.forEach(field => { _%>
              <%_ if(field.fieldType === 'DateTime') { _%>
              Text('<%= field.fieldNameHumanized %> : ${<%= entityInstance %>.<%= field.fieldName %> != null ? DateFormat("yyyy-MM-dd").format(<%= entityInstance %>.<%= field.fieldName %>!) : ''}', style: Theme.of(context).textTheme.bodyLarge,),
              <%_ } else if (field.fieldType === 'int' || field.fieldType === 'bool') {_%>
                Text('<%= field.fieldNameHumanized %> : ${<%= entityInstance %>.<%= field.fieldName %>}', style: Theme.of(context).textTheme.bodyLarge,),
              <%_ } else {_%>
                Text('<%= field.fieldNameHumanized %> : ${<%= entityInstance %>.<%= field.fieldName %>}', style: Theme.of(context).textTheme.bodyLarge,),
              <%_ } _%>
            <%_ }); _%>
          ],
        ),
      ),
    );
  }
}
