<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const enableTranslation = context.enableTranslation;
const fields = context.fields;
const idField = context.idField;
const relationships = context.relationships;
const filtering = context.filtering;
let filtro = 1;
_%>
import 'package:adaptive_scrollbar/adaptive_scrollbar.dart';
import 'package:data_table_2/data_table_2.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:go_router/go_router.dart';
import 'package:pager/pager.dart';
import 'package:<%= baseName %>/shared/utils/utils.dart';
import 'package:<%= baseName %>/shared/widgets/view_json_dialog.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_model.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/<%= entityFileName %>_routes.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/views/widgets/<%= entityFileName %>_delete_dialog.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/views/widgets/<%= entityFileName %>_filter_dialog.dart';
<%_ relationships.forEach(relationship => { %>
<%_ if(!relationship.isList) { _%>
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/bloc/<%= relationship.otherEntityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/models/<%= relationship.otherEntityFileName %>_models.dart';
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/<%= relationship.otherEntityFileName %>_repository.dart';
import 'package:<%= baseName %>/entities/<%= relationship.otherEntityFileName %>/<%= relationship.otherEntityFileName %>_routes.dart';
<%_ } _%>
<%_ }); _%>
// jhipster-merlin-needle-import-add

class <%= entityClass %>Table extends StatelessWidget {
  <%= entityClass %>Table({
    super.key,
    required this.<%= entityClassPluralLowered %>,
  });

  final List<<%= entityClass %>> <%= entityClassPluralLowered %>;
  final ScrollController horizontalScroll = ScrollController();
  final ScrollController verticalScroll = ScrollController();
  final double widthScrollbar = 10.0;

  @override
  Widget build(BuildContext context) {
    final widthSize = MediaQuery.of(context).size.width;
    final heigthSize = MediaQuery.of(context).size.height;
    final ThemeData theme = Theme.of(context);
    final blocContext = context.read<<%= entityClass %>Bloc>();

    return SingleChildScrollView(
      child: Column(
        children: [
          SizedBox(
            width: double.infinity,
            child: Card(
              margin: EdgeInsets.zero,
              elevation: 5,
              shadowColor: Theme.of(context).colorScheme.primary,
              surfaceTintColor: Theme.of(context).colorScheme.primary,
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Wrap(
                  direction: Axis.horizontal,
                  alignment: widthSize < 1300
                      ? WrapAlignment.center
                      : WrapAlignment.end,
                  runSpacing: 10,
                  spacing: 10,
                  children: [
                    ElevatedButton.icon(
                      onPressed: () => context.push(<%= entityClass %>Routes.create),
                      style: ButtonStyle(
                        elevation: const MaterialStatePropertyAll(5.0),
                        minimumSize:
                            const MaterialStatePropertyAll(Size(250, 50)),
                        backgroundColor: MaterialStatePropertyAll(
                          context.read<ThemeBloc>().state == ThemeMode.dark
                              ? Theme.of(context).colorScheme.primaryContainer
                              : Theme.of(context).colorScheme.primary,
                        ),
                      ),
                      icon: const Icon(Icons.add, color: Colors.white),
                      label: const Text(
                        'Agregar <%= entityInstance %>',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                    const SizedBox(width: 10),
                    ElevatedButton.icon(
                      onPressed: () {
                        int pageQuery = blocContext.state.currentPage - 1;
                        String columnName =
                            context.read<<%= entityClass %>Bloc>().state.columnName;
                        var order =
                            blocContext.state.sortAscending ? 'asc' : 'desc';

                        blocContext.add(Load<%= entityClass %>List(
                          page: pageQuery,
                          sort: columnName,
                          ascending: order,
                        ));
                      },
                      style: ButtonStyle(
                        elevation: const WidgetStatePropertyAll(5.0),
                        minimumSize:
                            const WidgetStatePropertyAll(Size(200, 50)),
                        backgroundColor: WidgetStatePropertyAll(
                          context.read<ThemeBloc>().state == ThemeMode.dark
                              ? theme.colorScheme.primaryContainer
                              : theme.colorScheme.primary,
                        ),
                      ),
                      icon: const Icon(Icons.refresh_rounded,
                          color: Colors.white),
                      label: const Text(
                        'Actualizar lista',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
          if (!validarVisibilidad(blocContext.state))
            Padding(
              padding: const EdgeInsets.only(top: 10, right: 16, left: 16),
              child: Card(
                margin: EdgeInsets.zero,
                elevation: 4,
                surfaceTintColor: Colors.amber,
                color: Colors.amber[300],
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: SizedBox(
                    width: MediaQuery.of(context).size.width * 0.50,
                    child: Wrap(
                      alignment: WrapAlignment.center,
                      crossAxisAlignment: WrapCrossAlignment.center,
                      spacing: 10,
                      children: [
                        const Icon(Icons.warning_amber_rounded),
                        Text(
                          'No hay registros para mostrar.',
                          style: theme.textTheme.headlineMedium,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          Padding(
            padding: const EdgeInsets.only(top: 10, bottom: 10),
            child: Theme(
              data: ThemeData(
                  iconTheme: const IconThemeData(color: Colors.white),
                  scrollbarTheme: ScrollbarThemeData(
                      thickness: const WidgetStatePropertyAll(5),
                      thumbVisibility: const WidgetStatePropertyAll(true),
                      thumbColor:
                          WidgetStatePropertyAll<Color>(theme.primaryColor))),
              child: SizedBox(
                height: !kIsWeb ? heigthSize * 0.70 : heigthSize * 0.65,
                child: Card(
                  margin: EdgeInsets.zero,
                  elevation: 5,
                  shadowColor: Theme.of(context).colorScheme.primary,
                  surfaceTintColor: Theme.of(context).colorScheme.primary,
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ClipRRect(
                      borderRadius: const BorderRadius.all(Radius.circular(15)),
                      child: AdaptiveScrollbar(
                        controller: verticalScroll,
                        width: widthScrollbar,
                        scrollToClickDelta: 75,
                        scrollToClickFirstDelay: 200,
                        scrollToClickOtherDelay: 50,
                        sliderDecoration: BoxDecoration(
                            color: theme.colorScheme.primary,
                            borderRadius:
                                const BorderRadius.all(Radius.circular(12.0))),
                        sliderActiveDecoration: const BoxDecoration(
                            color: Color.fromRGBO(206, 206, 206, 100),
                            borderRadius:
                                BorderRadius.all(Radius.circular(12.0))),
                        underColor: Colors.transparent,
                        child: AdaptiveScrollbar(
                          underSpacing: const EdgeInsets.only(bottom: 20),
                          controller: horizontalScroll,
                          width: widthScrollbar,
                          position: ScrollbarPosition.bottom,
                          sliderDecoration: BoxDecoration(
                              color: theme.colorScheme.primary,
                              borderRadius: const BorderRadius.all(
                                  Radius.circular(12.0))),
                          sliderActiveDecoration: const BoxDecoration(
                              color: Color.fromRGBO(206, 206, 206, 100),
                              borderRadius:
                                  BorderRadius.all(Radius.circular(12.0))),
                          underColor: Colors.transparent,
                          child: SingleChildScrollView(
                            controller: horizontalScroll,
                            scrollDirection: Axis.horizontal,
                            child: Container(
                              constraints: const BoxConstraints(
                                minWidth: 600,
                                maxWidth: 8000,
                              ),
                              width: 8000,
                              child: DataTable2(
                                headingRowHeight: 65,
                                smRatio: 0.75,
                                lmRatio: 1.5,
                                headingRowColor: WidgetStateColor.resolveWith(
                                    (states) => theme.primaryColor),
                                headingTextStyle:
                                    const TextStyle(color: Colors.white),
                                headingCheckboxTheme: const CheckboxThemeData(
                                  side: BorderSide(
                                      color: Colors.white, width: 2.0),
                                ),
                                isHorizontalScrollBarVisible: false,
                                isVerticalScrollBarVisible: false,
                                columnSpacing: 12,
                                horizontalMargin: 12,
                                sortArrowBuilder: null,
                                border: TableBorder(
                                    horizontalInside:
                                        BorderSide(color: theme.primaryColor),
                                    right:
                                        BorderSide(color: theme.primaryColor)),
                                dividerThickness: 1,
                                bottomMargin: 10,
                                minWidth: 900,
                                sortColumnIndex:
                                    blocContext.state.sortColumnIndex,
                                sortAscending: blocContext.state.sortAscending,
                                sortArrowIcon: Icons.keyboard_arrow_up,
                                sortArrowAnimationDuration:
                                    const Duration(milliseconds: 500),
                                columns:
                                    _columns(widthSize, context, blocContext),
                                empty: Center(
                                  child: Container(
                                    padding: const EdgeInsets.all(20),
                                    color: Colors.grey[200],
                                    child: const Text(
                                        'No hay registros para mostrar.'),
                                  ),
                                ),
                                rows: _rows(widthSize, context),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
          if (validarVisibilidad(blocContext.state))
            SizedBox(
              width: widthSize < 1300 ? (widthSize * 0.8) : (widthSize * 0.5),
              child: Padding(
                padding: const EdgeInsets.only(bottom: 10),
                child: Card(
                  margin: EdgeInsets.zero,
                  elevation: 5,
                  shadowColor: Theme.of(context).colorScheme.primary,
                  surfaceTintColor: Theme.of(context).colorScheme.primary,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                        horizontal: 20, vertical: 10),
                    child: Wrap(
                      alignment: WrapAlignment.spaceAround,
                      runAlignment: WrapAlignment.center,
                      crossAxisAlignment: WrapCrossAlignment.center,
                      runSpacing: 10,
                      children: [
                        Text(
                          'Total <%= entityClassPluralLowered %>: ${blocContext.state.totalRow}',
                          style: Theme.of(context).textTheme.headlineSmall,
                        ),
                        Text(
                          'Total paginas: ${cantidadDePaginas(
                            blocContext.state.totalRow,
                            blocContext.state.rowsPerPage,
                          )}',
                          style: Theme.of(context).textTheme.headlineSmall,
                        ),
                        Pager(
                          currentPage: blocContext.state.currentPage,
                          totalPages: cantidadDePaginas(
                            blocContext.state.totalRow,
                            blocContext.state.rowsPerPage,
                          ),
                          onPageChanged: (page) {
                            int pageQuery = page - 1;
                            blocContext
                                .add(<%= entityClass %>CurrentPageChanged(currentPage: page));
                            String columnName = blocContext.state.columnName;
                            var order = blocContext.state.sortAscending
                                ? 'asc'
                                : 'desc';

                            if (blocContext.state.filters.isNotEmpty) {
                              blocContext.add(<%= entityClass %>Filter(
                                page: pageQuery,
                                sort: columnName,
                                ascending: order,
                              ));
                            } else {
                              blocContext.add(Load<%= entityClass %>List(
                                page: pageQuery,
                                sort: columnName,
                                ascending: order,
                              ));
                            }
                          },
                          numberButtonSelectedColor: theme.primaryColor,
                          numberTextUnselectedColor: Colors.grey,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }

  List<DataRow> _rows(double widthSize, BuildContext buildContext,) {
    List<DataRow> rows = List<DataRow>.empty();
    if (<%= entityClassPluralLowered %>.isNotEmpty) {
      rows = <%= entityClassPluralLowered %>.map((<%= entityInstance %>) {
        return DataRow2.byIndex(
          index: <%= entityInstance %>.id,
          cells: _cell(<%= entityInstance %>, widthSize, buildContext),
        );
      }).toList();
    }
    return rows;
  }

  int cantidadDePaginas(int totalRegistros, int registrosPorPagina) {
    return (totalRegistros / registrosPorPagina).ceil();
  }

  bool validarVisibilidad(<%= entityClass %>State state) {
    return state.<%= entityClassPluralLowered %>.isNotEmpty ? true : false;
  }

  List<DataColumn> _columns(
    double widthSize,
    BuildContext context,
    <%= entityClass %>Bloc blocContext,
    ) {
    return [
      DataColumn2(
        label: const Text(''),
        fixedWidth: widthSize < 1200 ? 150 : 300,
      ),
      <%_ if(filtering) { _%>
      DataColumn2(
        label: Align(
          alignment: Alignment.centerLeft,
          child: _buildColumnLabel(
            context,
            '<%= context.idField.fieldNameHumanized %>',
            'id',
            FilterMaps.filterTableNumeric,
            'numeric',
          ),
        ),
        size: ColumnSize.S,
        numeric: true,
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending, blocContext),
      ),
      <%_ } else { _%>
        DataColumn2(
          label: Align(
            alignment: Alignment.centerLeft,
            child: Text('<%= context.idField.fieldNameHumanized %>',),
          ),
          size: ColumnSize.S,
          numeric: true,
          onSort: (columnIndex, ascending) => sort(columnIndex, ascending, blocContext),
        ),
      <%_ } _%>
    <%_ fields.forEach(field => { %>
      <%_ if(filtering) { _%>
        <%_ if(field.enableFilter) { _%>
        DataColumn2(
          <%_ if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
          label: Align(
            alignment: Alignment.centerLeft,
            child: _buildColumnLabel(
              context,
              '<%= field.fieldNameHumanized %>',
              '<%- field.fieldName -%>',
              FilterMaps.filterTableNumeric,
              'numeric',
            ),
          ),
          numeric: true,
          <%_ } else if(field.fieldType === 'bool' ) {_%>
          label: Align(
            alignment: Alignment.centerLeft,
            child: _buildColumnLabel(
              context,
              '<%= field.fieldNameHumanized %>',
              '<%- field.fieldName -%>',
              FilterMaps.filterTable,
              'bool',
            ),
          ),
          size: ColumnSize.S,
          <%_ } else if(field.fieldType === 'String' ) {_%>
          label: Align(
            alignment: Alignment.centerLeft,
            child: _buildColumnLabel(
              context,
              '<%= field.fieldNameHumanized %>',
              '<%- field.fieldName -%>',
              FilterMaps.filterTableString,
              'string',
            ),
          ),
          <%_ } else if(field.fieldType === 'DateTime' ) {_%>
          label: Align(
            alignment: Alignment.centerLeft,
            child: _buildColumnLabel(
              context,
              '<%= field.fieldNameHumanized %>',
              '<%- field.fieldName -%>',
              FilterMaps.filterTableNumeric,
              'date',
            ),
          ),
          <%_ } else { _%>
          label: Align(
            alignment: Alignment.centerLeft,
            child: _buildColumnLabel(
              context,
              '<%= field.fieldNameHumanized %>',
              '<%- field.fieldName -%>',
              FilterMaps.filterTableString,
              'string',
            ),
          ),
          <%_ } _%>
          onSort: (columnIndex, ascending) => sort(columnIndex, ascending, blocContext),
        ),
        <%_ } else { _%>
          DataColumn2(
            label: Align(
              alignment: Alignment.centerLeft,
              child: Text('<%= field.fieldNameHumanized %>',),
            ),
            <%_ if(field.fieldType === 'bool') { _%>
            size: ColumnSize.S,
            <%_ } else if(field.fieldType === 'DateTime' ) { _%>
            size: ColumnSize.M,
            <%_ } else if(field.fieldType === 'String' ) { _%>
            size: ColumnSize.L,
            <%_ } else { _%>
            size: ColumnSize.M,
            <%_ } _%>
            <%_ if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
            numeric: true,
            <%_ } _%>
            onSort: (columnIndex, ascending) => sort(columnIndex, ascending, blocContext),
          ),
        <%_ } _%>
      <%_ } else { _%>
      DataColumn2(
        label: Align(
          alignment: Alignment.centerLeft,
          child: Text('<%= field.fieldNameHumanized %>',),
        ),
        <%_ if(field.fieldType === 'bool') { _%>
        size: ColumnSize.S,
        <%_ } else if(field.fieldType === 'DateTime' ) { _%>
        size: ColumnSize.M,
        <%_ } else if(field.fieldType === 'String' ) { _%>
        size: ColumnSize.L,
        <%_ } else { _%>
        size: ColumnSize.M,
        <%_ } _%>
        <%_ if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
        numeric: true,
        <%_ } _%>
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending, blocContext),
      ),
      <%_ } _%>
    <%_ }); _%>
    <%_ relationships.forEach(relationship => { %>
      <%_ if(!relationship.isList) { _%>
      DataColumn2(
        label: const Text('<%= relationship.otherEntityNameCapitalized %>'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending, blocContext),
      ),
      <%_ } _%>
    <%_ }); _%>
    ];
  }

  Widget _buildColumnLabel(
    BuildContext context,
    String label,
    String columnName,
    Map<String, String> filter,
    String type,
  ) {
    return BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
      builder: (blocContext, state) {
        String? claveEncontrada;
        String? valorEncontrado;
        List<String> partes = [];
        if (state.filters.containsKey(columnName)) {
          String? filtroString = state.filters[columnName];
          if (filtroString != null) {
            partes = filtroString.split('=');
            claveEncontrada = FilterMaps.obtenerClavePorValor(filter, partes[0]);

            valorEncontrado = type == 'date'
                ? CustomDateTime.formatearFechaHoraMin(partes[1])
                : partes[1];
          }
        }

        return Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Wrap(
                alignment: WrapAlignment.end,
                crossAxisAlignment: WrapCrossAlignment.center,
                spacing: 10,
                runSpacing: 5,
                children: [
                  SizedBox(
                    width: double.infinity,
                    child: Text(
                      label,
                      textAlign: TextAlign.center,
                    ),
                  ),
                  SizedBox(
                    width: double.infinity,
                    child:                   Tooltip(
                      message: state.filters.containsKey(columnName)
                          ? 'Filtro aplicado $claveEncontrada, valor $valorEncontrado.'
                          : '',
                      child: IconButton(
                        onPressed: () {
                          if (state.filters.containsKey(columnName)) {
                            Map<String, String> newFilter =
                                Map<String, String>.from(state.filters);

                            if (newFilter.containsKey(columnName)) {
                              newFilter.remove(columnName);
                              blocContext.read<<%= entityClass %>Bloc>().add(<%= entityClass %>FilterChanged(
                                    filters: newFilter,
                                  ));

                              String columnNameSort = state.columnName;
                              var order = state.sortAscending ? 'asc' : 'desc';
                              int pageQuery = state.currentPage - 1;

                              blocContext.read<<%= entityClass %>Bloc>().add(<%= entityClass %>Filter(
                                    page: pageQuery,
                                    sort: columnNameSort,
                                    ascending: order,
                                  ));
                            }
                          } else {
                            showDialog(
                              context: context,
                              builder: (BuildContext context) {
                                return <%= entityClass %>FilterDialog(
                                  columnName: columnName,
                                  filter: filter,
                                  type: type,
                                  blocContext: blocContext,
                                  dialogContext: context,
                                );
                              },
                            );
                          }
                        },
                        icon: Icon(
                          state.filters.containsKey(columnName)
                              ? Icons.filter_alt_off_rounded
                              : Icons.filter_alt,
                          color: state.filters.containsKey(columnName)
                              ? Colors.blueAccent
                              : Colors.grey,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  List<DataCell> _cell(
      <%= entityClass %> <%= entityInstance %>,
      double widthSize,
      BuildContext context,
      ) {
    return [
      DataCell(
        Row(
          children: [
            widthSize > 1200
                ?  TextButton.icon(
                    label: const Text('Ver'),
                    onPressed: () {
                      context.push('${<%= entityClass %>Routes.viewPath}${<%= entityInstance %>.id}');
                    },
                    icon: const Icon(
                      Icons.remove_red_eye_outlined,
                      color: Colors.green,
                    ),
                  )
                : IconButton(
                    onPressed: () {
                      context.push('${<%= entityClass %>Routes.viewPath}${<%= entityInstance %>.id}');
                    },
                    icon: const Icon(
                      Icons.remove_red_eye_outlined,
                      color: Colors.green,
                    ),
                  ),
            widthSize > 1200
                ?  TextButton.icon(
                    label: const Text('Editar'),
                    onPressed: () {
                      context.push('${<%= entityClass %>Routes.editPath}${<%= entityInstance %>.id}');
                    },
                    icon: const Icon(
                      Icons.edit,
                      color: Colors.amber,
                    ),
                  )
                : IconButton(
                    onPressed: () {
                      context.push('${<%= entityClass %>Routes.editPath}${<%= entityInstance %>.id}');
                    },
                    icon: const Icon(
                      Icons.edit,
                      color: Colors.amber,
                    ),
                  ),
            widthSize > 1200
                ?  TextButton.icon(
                    label: const Text('Eliminar'),
                    onPressed: () {
                      showDialog(
                        context: context,
                        builder: (BuildContext context) {
                          return <%= entityClass %>DeleteDialog(
                            id: <%= entityInstance %>.id,
                            blocContext: context,
                          );
                        },
                      );
                    },
                    icon: const Icon(
                      Icons.delete_forever,
                      color: Colors.red,
                    ),
                  )
                : IconButton(
                    onPressed: () {
                      showDialog(
                        context: context,
                        builder: (BuildContext context) {
                          return <%= entityClass %>DeleteDialog(
                            id: <%= entityInstance %>.id,
                            blocContext: context,
                          );
                        },
                      );
                    },
                    icon: const Icon(
                      Icons.delete_forever,
                      color: Colors.red,
                    ),
                  ),
          ],
        ),
      ),
      DataCell(
        Align(alignment: Alignment.centerLeft, child: Text('${<%= entityInstance %>.<%= idField.fieldName %>}')),
      ),
    <%_ fields.forEach(field => { %>
      DataCell(
        <%_ if(field.fieldType === 'int' || field.fieldType === 'double') { _%>
        Align(
          alignment: Alignment.centerLeft,
          <%_ if(field.fieldValidateRules != 'required' ) { _%>
          child: Text('${<%= entityInstance %>.<%- field.fieldName -%> ?? '0.00'}'),
          <%_ } else { _%>
          child: Text('${<%= entityInstance %>.<%- field.fieldName -%>}'),
          <%_ } _%>
        ),
        <%_ } else if (field.fieldIsEnum) {_%>
        Text(
          '${<%= entityInstance %>.<%- field.fieldName -%>?.name}',
          style: TextStyle(
              fontWeight: FontWeight.bold, color: getColor<%= field.fieldType %>(<%= entityInstance %>.<%- field.fieldName -%>)),
        ),
        <%_ } else if (field.fieldType === 'DateTime') {_%>
        Text(<%= entityInstance %>.<%- field.fieldName -%> != null
        ? CustomDateTime.formatearFechaHora(<%= entityInstance %>.<%- field.fieldName -%>!)
        : 'S/D'),
        <%_ } else { _%>
          <%_ if(field.fieldValidateRules != 'required' ) { _%>
            Text('${<%= entityInstance %>.<%- field.fieldName -%> ?? 'S/D'}'),
          <%_ } else { _%>
            Text('${<%= entityInstance %>.<%- field.fieldName -%>}'),
          <%_ } _%>
        <%_ } _%>
      ),
    <%_ }); _%>
    <%_ relationships.forEach(relationship => { %>
      <%_ if(!relationship.isList) { _%>
      DataCell(
        <%= entityInstance %>.<%= relationship.otherEntityName %> != null
            ? RichText(
                text: TextSpan(
                    text: '${<%= entityInstance %>.<%= relationship.otherEntityName %>?.<%=relationship.otherEntityField %>}',
                    style: TextStyle(
                      color: Theme.of(context).primaryColor,
                      fontWeight: FontWeight.bold,
                    ),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () => context.push('${<%= relationship.otherEntityNameCapitalized %>Routes.viewPath}${<%= entityInstance %>.<%= relationship.otherEntityName %>?.id}'),
                  ),
              )
            : const Text(
                'Sin asignar',
                style: TextStyle(
                  color: Colors.black87,
                ),
              ),
      ),
      <%_ } _%>
    <%_ }); _%>
    ];
  }

  void sort(
    int columnIndex,
    bool ascending,
    <%= entityClass %>Bloc blocContext,
  ) {
    var columnName = '<%= idField.fieldName %>';
    switch (columnIndex) {
      case 1:
        columnName = '<%= idField.fieldName %>';
        break;
    <%_ fields.forEach(field => { %>
      <%_ filtro++; _%>
      case <%= filtro %>:
        columnName = '<%= field.fieldName %>';
        break;
    <%_ }); _%>
    }
    int pageQuery = blocContext.state.currentPage - 1;
    var order = ascending ? 'asc' : 'desc';

    blocContext.add(<%= entityClass %>SortChanged(
          sortColumnIndex: columnIndex,
          sortAscending: ascending,
          columnName: columnName,
        ));

    Map<String, String> filters = blocContext.state.filters;

    if (filters.isEmpty) {
      blocContext.add(Load<%= entityClass %>List(
        page: pageQuery,
        sort: columnName,
        ascending: order,
      ));
    } else {
      blocContext.add(<%= entityClass %>Filter(
        page: pageQuery,
        sort: columnName,
        ascending: order,
      ));
    }
  }

  <%_
  const enumsAlreadyDeclared = [];
  fields.forEach(field => {
      if (field.fieldIsEnum && enumsAlreadyDeclared.indexOf(field.fieldType) === -1) {
          enumsAlreadyDeclared.push(field.fieldType);
  _%>
  Color getColor<%= field.fieldType %>(<%= field.fieldType %>? estado) {
    <% const enums = field.fieldValues.split(','); %>
    switch (estado) {
      <% for (let i = 0; i < enums.length; i++) {
        let red = Math.floor(Math.random() * 256);
        let green = Math.floor(Math.random() * 256);
        let blue = Math.floor(Math.random() * 256);
      %>
      case <%= field.fieldType %>.<%= enums[i] %>:
        return Color.fromARGB(255, <%= red %>, <%= green %>, <%= blue %>);
      <% } %>
      default:
        return Colors.black;
    }
  }
  <%_}});_%>
}
