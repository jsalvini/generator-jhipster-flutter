<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
_%>
import 'dart:convert';
import 'package:dartz/dartz.dart';
import 'package:http/http.dart';
import 'package:<%= baseName %>/core/exceptions/exception.dart';
import 'package:<%= baseName %>/core/exceptions/failure.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
import 'package:<%= baseName %>/shared/exceptions/app_exception.dart';
import 'package:<%= baseName %>/shared/models/error_response.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

class <%= entityClass %>Repository {
    <%= entityClass %>Repository();

  static const String uriEndpoint = '/<%= entityClassKebabCasePlural %>';

  Future<Either<Failure, <%= entityClass %>Response>> getAll<%= entityClassPlural %>({
    required int page,
    required String sort,
    required String ascending,
  }) async {
    final newUriEndpoint = '$uriEndpoint?sort=$sort%2C$ascending&page=$page&size=20';
    try {
      final Response response = await HttpUtils.getRequest(newUriEndpoint);
      const JsonDecoder decoder = JsonDecoder();

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse errorResponse = ErrorResponse.fromJson(
            decoder.convert(utf8.decode(response.bodyBytes)));
        return Left(
          ServerFailure(errorMessage: errorResponse.detail),
        );
      }

      int count = int.parse(response.headers['x-total-count'] ?? '0');
      String link = response.headers['link'] ?? newUriEndpoint;

      List<<%= entityClass %>>? <%= entityInstance %>List = [];

      final decodeResponse = decoder.convert(utf8.decode(response.bodyBytes));

      for (var <%= entityInstance %> in decodeResponse) {
        final new<%= entityClass %> = <%= entityClass %>.fromJson(<%= entityInstance %>);
        <%= entityInstance %>List.add(new<%= entityClass %>);
      }

      <%= entityClass %>Response <%= entityInstance %>Response = <%= entityClass %>Response(
        <%= entityClassPluralLowered %>: <%= entityInstance %>List,
        totalCount: count,
        link: link,
      );

      return Right(<%= entityInstance %>Response);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, <%= entityClass %>?>> get<%= entityClass %>(int? id) async {
    try {
      final Response response = await HttpUtils.getRequest('$uriEndpoint/$id');
      const JsonDecoder decoder = JsonDecoder();

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse errorResponse = ErrorResponse.fromJson(
            decoder.convert(utf8.decode(response.bodyBytes)));
        return Left(
          ServerFailure(errorMessage: errorResponse.detail),
        );
      }
      <%= entityClass %>? <%= entityInstance %> = <%= entityClass %>.fromJson(decoder.convert(utf8.decode(response.bodyBytes)));
      return Right(<%= entityInstance %>);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, <%= entityClass %>?>> create(<%= entityClass %> <%= entityInstance %>) async {
    try {
        final Response response = await HttpUtils.postRequest(uriEndpoint, <%= entityInstance %>);
        const JsonDecoder decoder = JsonDecoder();

        if (response.statusCode >= 300 && response.statusCode < 600) {
          ErrorResponse errorResponse = ErrorResponse.fromJson(
              decoder.convert(utf8.decode(response.bodyBytes)));
          return Left(
            ServerFailure(errorMessage: errorResponse.detail),
          );
        }
      <%= entityClass %>? new<%= entityClass %> = <%= entityClass %>.fromJson(decoder.convert(utf8.decode(response.bodyBytes)));
      return Right(new<%= entityClass %>);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, <%= entityClass %>?>> update(<%= entityClass %> <%= entityInstance %>, int id) async {
    try {
      final Response response =
      await HttpUtils.putRequest('$uriEndpoint/$id', <%= entityInstance %>);
      const JsonDecoder decoder = JsonDecoder();

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse errorResponse = ErrorResponse.fromJson(
            decoder.convert(utf8.decode(response.bodyBytes)));
        return Left(
          ServerFailure(errorMessage: errorResponse.detail),
        );
      }

      <%= entityClass %>? updated<%= entityClass %> = <%= entityClass %>.fromJson(decoder.convert(utf8.decode(response.bodyBytes)));

      return Right(updated<%= entityClass %>);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, String>> delete(int id) async {
    try {
      final Response response =
          await HttpUtils.deleteRequest('$uriEndpoint/$id');
      const JsonDecoder decoder = JsonDecoder();

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse errorResponse = ErrorResponse.fromJson(
            decoder.convert(utf8.decode(response.bodyBytes)));
        return Left(
          ServerFailure(errorMessage: errorResponse.detail),
        );
      }
      return const Right("OK");
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, <%= entityClass %>Response>> get<%= entityClassPlural %>Filter({
    required int page,
    required String sort,
    required String ascending,
    required String urlFilters,
  }) async {
    final newUriEndpoint =
        '$uriEndpoint/filter?$urlFilters&sort=$sort%2C$ascending&page=$page&size=20';
    try {
      final Response response = await HttpUtils.getRequest(newUriEndpoint);

      const JsonDecoder decoder = JsonDecoder();

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse errorResponse = ErrorResponse.fromJson(
            decoder.convert(utf8.decode(response.bodyBytes)));
        return Left(
          ServerFailure(errorMessage: errorResponse.detail),
        );
      }

      int count = int.parse(response.headers['x-total-count'] ?? '0');
      String link = response.headers['link'] ?? newUriEndpoint;
      List<<%= entityClass %>>? <%= entityInstance %>List = [];
      final decodeResponse = decoder.convert(utf8.decode(response.bodyBytes));

      for (var <%= entityInstance %> in decodeResponse) {
        final new<%= entityClass %> = <%= entityClass %>.fromJson(<%= entityInstance %>);
        <%= entityInstance %>List.add(new<%= entityClass %>);
      }

      <%= entityClass %>Response <%= entityInstance %>Response = <%= entityClass %>Response(
        <%= entityClassPluralLowered %>: <%= entityInstance %>List,
        totalCount: count,
        link: link,
      );

      return Right(<%= entityInstance %>Response);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }
}
