<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
_%>
import 'package:http/http.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_response.dart';
import 'package:<%= baseName %>/shared/models/error_response.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';
import 'package:dart_json_mapper/dart_json_mapper.dart';

class <%= entityClass %>Repository {
    <%= entityClass %>Repository();

  static const String uriEndpoint = '/<%= entityClassKebabCasePlural %>';

  Future<<%= entityClass %>Response> getAll<%= entityClassPlural %>({
    required int page,
    required String sort,
    required String ascending,
  }) async {
    final newUriEndpoint = '$uriEndpoint?sort=$sort%2C$ascending&page=$page&size=20';
    final Response all<%= entityClassPlural %>Request = await HttpUtils.getRequest(newUriEndpoint);

    int count = int.parse(all<%= entityClassPlural %>Request.headers['x-total-count']!);
    String link = all<%= entityClassPlural %>Request.headers['link'] as String;

    List<<%= entityClass %>>? <%= entityClassPluralLowered %> =
        JsonMapper.deserialize<List<<%= entityClass %>>>(all<%= entityClassPlural %>Request.body);

        <%= entityClass %>Response <%= entityInstance %>Response =
        <%= entityClass %>Response(<%= entityClassPluralLowered %>: <%= entityClassPluralLowered %>!, totalCount: count, link: link);
    return <%= entityInstance %>Response;
  }

  Future<<%= entityClass %>?> get<%= entityClass %>(int? id) async {
    final <%= entityInstance %>Request = await HttpUtils.getRequest('$uriEndpoint/$id');
    return JsonMapper.deserialize<<%= entityClass %>>(<%= entityInstance %>Request.body);
  }

  Future<<%= entityClass %>?> create(<%= entityClass %> <%= entityInstance %>) async {
    final <%= entityInstance %>Request = await HttpUtils.postRequest(uriEndpoint, <%= entityInstance %>);
    return JsonMapper.deserialize<<%= entityClass %>>(<%= entityInstance %>Request.body);
  }

  Future<<%= entityClass %>?> update(<%= entityClass %> <%= entityInstance %>, int id) async {
    final <%= entityInstance %>Request = await HttpUtils.putRequest('$uriEndpoint/$id', <%= entityInstance %>);
    return JsonMapper.deserialize<<%= entityClass %>>(<%= entityInstance %>Request.body);
  }

  Future<String> delete(int id) async {
	final <%= entityInstance %>Request = await HttpUtils.deleteRequest('$uriEndpoint/$id');
    if (<%= entityInstance %>Request.statusCode >= 300 && <%= entityInstance %>Request.statusCode < 600) {
      ErrorResponse? errorResponse =
          JsonMapper.deserialize<ErrorResponse>(<%= entityInstance %>Request.body);
      if (errorResponse != null) {
        return errorResponse.detail!;
      }
    }
    return 'OK';
  }
}
