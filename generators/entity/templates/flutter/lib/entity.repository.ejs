<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
const entityClassKebabCase = context.entityClassKebabCase;
const entityClassKebabCasePlural = context.entityClassKebabCasePlural;
_%>
import 'package:dartz/dartz.dart';
import 'package:http/http.dart';
import 'package:<%= baseName %>/core/exceptions/exception.dart';
import 'package:<%= baseName %>/core/exceptions/failure.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_models.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/models/<%= entityFileName %>_response.dart';
import 'package:<%= baseName %>/shared/exceptions/app_exception.dart';
import 'package:<%= baseName %>/shared/models/error_response.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';
import 'package:dart_json_mapper/dart_json_mapper.dart';

class <%= entityClass %>Repository {
    <%= entityClass %>Repository();

  static const String uriEndpoint = '/<%= entityClassKebabCasePlural %>';

  Future<Either<Failure, <%= entityClass %>Response>> getAll<%= entityClassPlural %>({
    required int page,
    required String sort,
    required String ascending,
  }) async {
    final newUriEndpoint = '$uriEndpoint?sort=$sort%2C$ascending&page=$page&size=20';
    try {
      final Response response = await HttpUtils.getRequest(newUriEndpoint);

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse =
            JsonMapper.deserialize<ErrorResponse>(response.body);
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }

      int count = int.parse(response.headers['x-total-count']!);
      String link = response.headers['link'] as String;
      List<<%= entityClass %>>? <%= entityClassPluralLowered %> =
          JsonMapper.deserialize<List<<%= entityClass %>>>(response.body);

          <%= entityClass %>Response <%= entityInstance %>Response = <%= entityClass %>Response(
            <%= entityClassPluralLowered %>: <%= entityClassPluralLowered %>!, totalCount: count, link: link);

      return Right(<%= entityInstance %>Response);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, <%= entityClass %>?>> get<%= entityClass %>(int? id) async {
    try {
      final Response response = await HttpUtils.getRequest('$uriEndpoint/$id');
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse =
            JsonMapper.deserialize<ErrorResponse>(response.body);
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      <%= entityClass %>? <%= entityInstance %> = JsonMapper.deserialize<<%= entityClass %>>(response.body);
      return Right(<%= entityInstance %>);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, <%= entityClass %>?>> create(<%= entityClass %> <%= entityInstance %>) async {
    try {
      final Response response =
          await HttpUtils.postRequest(uriEndpoint, <%= entityInstance %>);
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse =
            JsonMapper.deserialize<ErrorResponse>(response.body);
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      <%= entityClass %>? new<%= entityClass %> = JsonMapper.deserialize<<%= entityClass %>>(response.body);
      return Right(new<%= entityClass %>);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, <%= entityClass %>?>> update(<%= entityClass %> <%= entityInstance %>, int id) async {
    try {
      final Response response =
          await HttpUtils.putRequest('$uriEndpoint/$id', <%= entityInstance %>);
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse =
            JsonMapper.deserialize<ErrorResponse>(response.body);
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      <%= entityClass %>? updated<%= entityClass %> =
          JsonMapper.deserialize<<%= entityClass %>>(response.body);
      return Right(updated<%= entityClass %>);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, String>> delete(int id) async {
    try {
      final Response response =
          await HttpUtils.deleteRequest('$uriEndpoint/$id');
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse =
            JsonMapper.deserialize<ErrorResponse>(response.body);
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      return const Right("OK");
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }
}
