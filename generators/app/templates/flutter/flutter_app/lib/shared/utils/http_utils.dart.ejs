import 'dart:async';
import 'dart:convert' show Encoding, jsonEncode, utf8;
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:http/http.dart';
import 'package:<%= baseName %>/shared/storage/preferences.dart';
import 'package:<%= baseName %>/shared/utils/utils.dart';
import 'package:<%= baseName %>/shared/exceptions/app_exception.dart';
import '../../environment.dart';

class HttpUtils {
  static String errorHeader = 'x-gatewaympapp-error';
  static String successResult = 'success';
  static String keyForJWTToken = 'jwt-token';
  static String badRequestServerKey = 'error.400';
  static String errorServerKey = 'error.500';
  static const String generalNoErrorKey = 'none';

  static String encodeUTF8(String toEncode) {
    return utf8.decode(toEncode.runes.toList());
  }

  static Future<Map<String, String>> headers() async {
    String? jwt = Preferences.prefs.getString(HttpUtils.keyForJWTToken);

    if (jwt != null) {
      return {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $jwt'
      };
    } else {
      return {'Accept': 'application/json', 'Content-Type': 'application/json'};
    }
  }

  static Future<Response> postRequest<T extends JsonSerializable>(
      String endpoint, T body) async {
    var headers = await HttpUtils.headers();
    String jsonData = '';
    try {
      jsonData = jsonEncode(body.toJson());
    } catch (e) {
      throw FetchDataException(
          'Error al serializar el cuerpo de la solicitud: $e');
    }
    Response? response;
    try {
      response = await http
          .post(Uri.parse('${Constants.api}$endpoint'),
              headers: headers,
              body: jsonData,
              encoding: Encoding.getByName('utf-8'))
          .timeout(Duration(seconds: Constants.timeout));
    } on SocketException {
      throw FetchDataException('No hay conexión con el servidor.');
    } on TimeoutException {
      throw FetchDataException('Supero el tiempo de espera.');
    }
    return response;
  }

  static Future<Response> getRequest(String endpoint) async {
    var headers = await HttpUtils.headers();
    try {
      //log('Req: ${Constants.api}$endpoint');
      return await http
          .get(Uri.parse('${Constants.api}$endpoint'), headers: headers)
          .timeout(Duration(seconds: Constants.timeout));
    } on SocketException {
      throw FetchDataException('No hay conexión con el servidor.');
    } on TimeoutException {
      throw FetchDataException('Supero el tiempo de espera.');
    }
  }

  static Future<Response> putRequest<T extends JsonSerializable>(
      String endpoint, T body) async {
    var headers = await HttpUtils.headers();
    String jsonData = '';
    try {
      jsonData = jsonEncode(body.toJson());
    } catch (e) {
      throw FetchDataException(
          'Error al serializar el cuerpo de la solicitud: $e');
    }
    Response response;
    try {
      response = await http
          .put(Uri.parse('${Constants.api}$endpoint'),
              headers: headers,
              body: jsonData,
              encoding: Encoding.getByName('utf-8'))
          .timeout(Duration(seconds: Constants.timeout));
    } on SocketException {
      throw FetchDataException('No hay conexión con el servidor.');
    } on TimeoutException {
      throw FetchDataException('Supero el tiempo de espera.');
    }
    return response;
  }

  static Future<Response> deleteRequest(String endpoint) async {
    var headers = await HttpUtils.headers();
    try {
      return await http
          .delete(Uri.parse('${Constants.api}$endpoint'), headers: headers)
          .timeout(Duration(seconds: Constants.timeout));
    } on SocketException {
      throw FetchDataException('No hay conexión con el servidor.');
    } on TimeoutException {
      throw FetchDataException('Supero el tiempo de espera.');
    }
  }

  dynamic returnResponse(http.Response response) {
    switch (response.statusCode) {
      case 200:
        return response;
      case 400:
        throw BadRequestException(response.body.toString());
      case 401:
      case 403:
        throw UnauthorisedException(response.body.toString());
      case 500:
      default:
        throw FetchDataException(
            'Se produjo un error durante la comunicación con el servidor con codígo de estado: ${response.statusCode}');
    }
  }
}
