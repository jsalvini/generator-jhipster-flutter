import 'dart:async';
import 'dart:convert';
import 'package:dart_json_mapper/dart_json_mapper.dart';
import 'package:<%= baseName %>/shared/storage/secure_storage.dart';
import 'package:<%= baseName %>/shared/models/jwt_token.dart';
import 'package:<%= baseName %>/shared/models/login_request.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

enum AuthenticationStatus { authenticated, unauthenticated }

class AuthenticationRepository {
  AuthenticationRepository();

  final _authenticateController = StreamController<AuthenticationStatus>();

  Stream<AuthenticationStatus> get status async* {
    yield* _authenticateController.stream;
  }

  Future<bool> authenticate(LoginRequest userJWT) async {

    final authenticateResponse =
        await HttpUtils.postRequest<LoginRequest>("/authenticate", userJWT);
    JWTToken? token;
    if (authenticateResponse.statusCode == 200) {
      token = JsonMapper.deserialize<JWTToken>(utf8.decode(authenticateResponse.bodyBytes));
      if (token != null) {
        await SecureStorage.storage.delete(key: HttpUtils.keyForJWTToken);
        await SecureStorage.storage.write(
            key: HttpUtils.keyForJWTToken, value: token.idToken);
        _authenticateController.add(AuthenticationStatus.authenticated);
        return true;
      }
    }
    return false;
  }

  Future<void> logout() async {
    await SecureStorage.storage.delete(key: HttpUtils.keyForJWTToken);
    _authenticateController.add(AuthenticationStatus.unauthenticated);
  }

  void dispose() => _authenticateController.close();
}
