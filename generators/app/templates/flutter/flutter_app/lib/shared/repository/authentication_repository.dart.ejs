import 'dart:async';
import 'dart:developer';
import 'package:dart_json_mapper/dart_json_mapper.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:<%= baseName %>/shared/models/jwt_token.dart';
import 'package:<%= baseName %>/shared/models/login_request.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

enum AuthenticationStatus { unknown, authenticated, unauthenticated, updated }

class AuthenticationRepository {
  AuthenticationRepository();

  final _authenticateController = StreamController<AuthenticationStatus>();
  final FlutterSecureStorage _storage = const FlutterSecureStorage();

  Stream<AuthenticationStatus> get status async* {
    await Future<void>.delayed(const Duration(seconds: 1));
    yield AuthenticationStatus.unauthenticated;
    yield* _authenticateController.stream;
  }

  Future<bool> authenticate(LoginRequest userJWT) async {
    String? jwt = await _storage.read(key: HttpUtils.keyForJWTToken);
    if (jwt != null) {
      log('Se renueva token');
      await _storage.delete(key: HttpUtils.keyForJWTToken);
    }

    final authenticateResponse =
        await HttpUtils.postRequest<LoginRequest>("/authenticate", userJWT);
    JWTToken? token;
    if (authenticateResponse.statusCode == 200) {
      token = JsonMapper.deserialize<JWTToken>(authenticateResponse.body);
      if (token != null) {
        await _storage.delete(key: HttpUtils.keyForJWTToken);
        await _storage.write(
            key: HttpUtils.keyForJWTToken, value: token.idToken);
        _authenticateController.add(AuthenticationStatus.authenticated);
        return true;
      }
    }
    return false;
  }

  Future<void> logout() async {
    await _storage.delete(key: HttpUtils.keyForJWTToken);
    _authenticateController.add(AuthenticationStatus.unauthenticated);
  }

  void dispose() => _authenticateController.close();
}
