import 'dart:convert';
import 'package:dartz/dartz.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/user/models/user_model.dart';
import 'package:<%= baseName %>/shared/exceptions/app_exception.dart';
import 'package:<%= baseName %>/shared/models/error_response.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

class AccountRepository {
  User? _user;
  AccountRepository();

  Future<Either<Failure, User?>> getAccount() async {
    try {
      final response = await HttpUtils.getRequest("/account");
      const JsonDecoder decoder = JsonDecoder();

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse errorResponse = ErrorResponse.fromJson(
            decoder.convert(utf8.decode(response.bodyBytes)));
        return Left(
          ServerFailure(errorMessage: errorResponse.detail),
        );
      }
      var userDecode = decoder.convert(utf8.decode(response.bodyBytes));
      _user = User.fromJson(userDecode);
      return Right(_user);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, String>> saveAccount(User user) async {
    try {
      final response = await HttpUtils.postRequest<User>("/account", user);
      const JsonDecoder decoder = JsonDecoder();

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse errorResponse = ErrorResponse.fromJson(
            decoder.convert(utf8.decode(response.bodyBytes)));
        return Left(
          ServerFailure(errorMessage: errorResponse.detail),
        );
      }
      return const Right("OK");
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }
}