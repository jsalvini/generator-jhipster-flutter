import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/authentication/authentication.dart';
import 'package:<%= baseName %>/core/router/routes.dart';
import 'package:<%= baseName %>/home/bloc/home_bloc.dart';
import 'package:<%= baseName %>/shared/repository/account_repository.dart';

class <%= camelizedUpperFirstBaseName %>Drawer extends StatelessWidget {
  const <%= camelizedUpperFirstBaseName %>Drawer({Key? key}) : super(key: key);

  static const double iconSize = 30;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context).copyWith(
      dividerColor: Colors.transparent,
    );
    return BlocProvider<HomeBloc>(
      create: (context) => HomeBloc(
        accountRepository: RepositoryProvider.of<AccountRepository>(context),
      )..add(Init()),
      child: Drawer(
        child: Column(
          children: [
            BlocBuilder<HomeBloc, HomeState>(
              builder: (context, state) {
                return UserAccountsDrawerHeader(
                  accountName: Text(
                    '${state.currentUser.firstName}, ${state.currentUser.lastName}',
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(fontSize: 22),
                  ),
                  accountEmail: Text(
                    '${state.currentUser.email}',
                    style: const TextStyle(fontSize: 16),
                  ),
                  currentAccountPicture: Padding(
                    padding: const EdgeInsets.only(bottom: 10),
                    child: CircleAvatar(
                      radius: 72,
                      backgroundColor: Theme.of(context).colorScheme.primary,
                      child: const CircleAvatar(
                        radius: 70,
                        backgroundColor: Colors.white,
                        backgroundImage:
                            AssetImage('assets/images/user.png'),
                      ),
                    ),
                  ),
                  decoration: BoxDecoration(
                    color: Theme.of(context).primaryColor,
                  ),
                );
              },
            ),
            Expanded(
              flex: 8,
              child: ListView(
                padding: EdgeInsets.zero,
                children: <Widget>[
                  ListTile(
                    leading: const Icon(
                      Icons.home,
                      size: iconSize,
                    ),
                    title: const Text('Inicio'),
                    onTap: () => context.pushNamed(<%= camelizedUpperFirstBaseName %>Routes.home),
                  ),
                  ListTile(
                    leading: const Icon(
                      Icons.settings,
                      size: iconSize,
                    ),
                    title: const Text('Perfil'),
                    onTap: () => context.pushNamed(<%= camelizedUpperFirstBaseName %>Routes.settings),
                  ),
                  AboutListTile(
                    icon: const Icon(
                      Icons.info,
                      size: iconSize,
                    ),
                    applicationIcon: Icon(
                      Icons.local_play,
                      color: context.read<ThemeBloc>().state == ThemeMode.dark
                        ? Colors.white
                        : Colors.black,
                    ),
                    applicationName: 'Template App',
                    applicationVersion: 'Versión 20240119',
                    applicationLegalese: 'Tipre 2024 ©',
                    child: const Text('Información'),
                  ),
                  const Divider(thickness: 2),
                  Theme(
                    data: theme,
                    child: ExpansionTile(
                      leading: const Icon(
                        Icons.list_alt_rounded,
                        size: iconSize,
                      ),
                      textColor: context.read<ThemeBloc>().state == ThemeMode.dark
                        ? Theme.of(context).colorScheme.primaryContainer
                        : Theme.of(context).colorScheme.primary,
                      iconColor: context.read<ThemeBloc>().state == ThemeMode.dark
                        ? Theme.of(context).colorScheme.primaryContainer
                        : Theme.of(context).colorScheme.primary,
                      title: const Text(
                        'Entidades',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      children: [
                        // jhipster-merlin-needle-menu-entry-add
                      ],
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              flex: 1,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton(
                    key: const Key('cerrarSesion_elevatedButton'),
                    onPressed: () =>
                      context
                          .read<AuthenticationBloc>()
                          .add(AuthenticationLogoutRequested())
                    ,
                    style: ButtonStyle(
                      backgroundColor: MaterialStatePropertyAll(
                        context.read<ThemeBloc>().state == ThemeMode.dark
                          ? Theme.of(context).colorScheme.primaryContainer
                          : Theme.of(context).colorScheme.primary,
                      ),
                    ),
                    child: const SizedBox(
                      width: 200,
                      height: 50,
                      child: Center(
                        child: Text(
                          'Cerrar sesión',
                          style: TextStyle(color: Colors.white, fontSize: 18),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              flex: 1,
              child: Padding(
                padding: const EdgeInsets.symmetric(vertical: 10),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Text('Theme Light'),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 10),
                      child: Switch(
                          value: context.read<ThemeBloc>().state == ThemeMode.dark,
                          onChanged: (value) {
                            context
                                .read<ThemeBloc>()
                                .add(ThemeChanged(isDark: value));
                          }),
                    ),
                    const Text('Theme Dark'),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
