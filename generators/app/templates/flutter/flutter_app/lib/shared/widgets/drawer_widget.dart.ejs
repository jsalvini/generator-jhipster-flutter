import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/authentication/authentication.dart';
import 'package:<%= baseName %>/core/router/routes.dart';
import 'package:<%= baseName %>/home/bloc/home_bloc.dart';
import 'package:<%= baseName %>/shared/repository/account_repository.dart';

class <%= camelizedUpperFirstBaseName %>Drawer extends StatelessWidget {
  const <%= camelizedUpperFirstBaseName %>Drawer({Key? key}) : super(key: key);

  static const double iconSize = 30;

  @override
  Widget build(BuildContext context) {
    return BlocProvider<HomeBloc>(
      create: (context) => HomeBloc(
        accountRepository: RepositoryProvider.of<AccountRepository>(context),
      )..add(Init()),
      child: Drawer(
        backgroundColor: Theme.of(context).colorScheme.background,
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            BlocBuilder<HomeBloc, HomeState>(
              builder: (context, state) {
                return UserAccountsDrawerHeader(
                  accountName: Text(
                    '${state.currentUser.firstName}, ${state.currentUser.lastName}',
                    overflow: TextOverflow.ellipsis,
                    style: TextStyle(
                      color: Theme.of(context).colorScheme.primary,
                      fontSize: 22,
                    ),
                  ),
                  accountEmail: Text(
                    '${state.currentUser.email}',
                    style: TextStyle(
                      color: Theme.of(context).colorScheme.primary,
                      fontSize: 16,
                    ),
                  ),
                  currentAccountPicture: Padding(
                    padding: const EdgeInsets.only(bottom: 10),
                    child: CircleAvatar(
                      radius: 72,
                      backgroundColor: Theme.of(context).colorScheme.primary,
                      child: const CircleAvatar(
                        radius: 70,
                        backgroundColor: Colors.white,
                        backgroundImage:
                            AssetImage('assets/images/logo_menu.png'),
                      ),
                    ),
                  ),
                  decoration: BoxDecoration(
                    color: Theme.of(context).colorScheme.onPrimary,
                  ),
                );
              },
            ),
            ListTile(
              leading: const Icon(
                Icons.home,
                size: iconSize,
              ),
              title: const Text('Home'),
              onTap: () => context.pushNamed(<%= camelizedUpperFirstBaseName %>Routes.home),
            ),
            ListTile(
              leading: const Icon(
                Icons.settings,
                size: iconSize,
              ),
              title: const Text('Settings'),
              onTap: () => context.pushNamed(<%= camelizedUpperFirstBaseName %>Routes.settings),
            ),
            ListTile(
              leading: const Icon(
                Icons.exit_to_app,
                size: iconSize,
              ),
              title: const Text('Sign out'),
              onTap: () {
                context
                    .read<AuthenticationBloc>()
                    .add(AuthenticationLogoutRequested());
              },
            ),
            const Divider(thickness: 2),
            // jhipster-merlin-needle-menu-entry-add
            const Divider(thickness: 2),
			      Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text('Theme Light'),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 10),
                  child: Switch(
                      value: context.read<ThemeBloc>().state == ThemeMode.dark,
                      onChanged: (value) {
                        context
                            .read<ThemeBloc>()
                            .add(ThemeChanged(isDark: value));
                      }),
                ),
                const Text('Theme Dark'),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
