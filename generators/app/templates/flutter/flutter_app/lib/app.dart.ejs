import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/authentication/authentication.dart';
import 'package:<%= baseName %>/shared/repository/repository.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

class <%= camelizedUpperFirstBaseName %>App extends StatefulWidget {
  const <%= camelizedUpperFirstBaseName %>App({Key? key}) : super(key: key);

  @override
  State<<%= camelizedUpperFirstBaseName %>App> createState() => _<%= camelizedUpperFirstBaseName %>AppState();
}

class _<%= camelizedUpperFirstBaseName %>AppState extends State<<%= camelizedUpperFirstBaseName %>App> {

  late final AuthenticationRepository _authenticationRepository;
  late final AccountRepository _accountRepository;
  late final FlutterSecureStorage _storage;

  @override
  void initState() {
    super.initState();
    _authenticationRepository = AuthenticationRepository();
    _accountRepository = AccountRepository();
    _storage = const FlutterSecureStorage();
  }

  @override
  void dispose() {
    _authenticationRepository.dispose();
    String? jwt = await _storage.read(key: HttpUtils.keyForJWTToken);
    if (jwt != null) {
      await _storage.delete(key: HttpUtils.keyForJWTToken);
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiRepositoryProvider(
      providers: [
        RepositoryProvider<AuthenticationRepository>(
          create: (context) => _authenticationRepository,
        ),
        RepositoryProvider<AccountRepository>(
          create: (context) => _accountRepository,
        ),
      ],
      child: MultiBlocProvider(
        providers: [
          BlocProvider<AuthenticationBloc>(
            create: (context) => AuthenticationBloc(
                authenticationRepository: _authenticationRepository,
                accountRepository: _accountRepository),
          ),
		  BlocProvider<ThemeBloc>(
            create: (context) => ThemeBloc(),
          ),
        ],
        child: const AppView(),
      ),
    );
  }
}


class AppView extends StatefulWidget {
  const AppView({super.key});

  @override
  State<AppView> createState() => _AppViewState();
}

class _AppViewState extends State<AppView> {
  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthenticationBloc, AuthenticationState>(
      listener: (context, state) {
        AppRouter.router.refresh();
      },
      child: BlocBuilder<ThemeBloc, ThemeMode>(
        builder: (context, state) {
          return MaterialApp.router(
            debugShowCheckedModeBanner: false,
            theme: Themes.lightTheme,
            darkTheme: Themes.darkTheme,
            themeMode: state,
            routeInformationParser: AppRouter.router.routeInformationParser,
            routerDelegate: AppRouter.router.routerDelegate,
            routeInformationProvider: AppRouter.router.routeInformationProvider,
          );
        },
      ),
    );
  }
}

