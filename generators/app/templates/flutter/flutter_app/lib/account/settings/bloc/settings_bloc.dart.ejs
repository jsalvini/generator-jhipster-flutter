import 'dart:async';
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/widgets.dart';
import 'package:formz/formz.dart';
import 'package:<%= baseName %>/account/settings/models/settings_models.dart';
import 'package:<%= baseName %>/account/user/models/user_model.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/shared/repository/account_repository.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';

part 'settings_event.dart';
part 'settings_state.dart';

class SettingsBloc extends Bloc<SettingsEvent, SettingsState> {
  final AccountRepository _accountRepository;
  final emailController = TextEditingController();
  final firstNameController = TextEditingController();
  final lastNameController = TextEditingController();

  static const String loginExistKey = 'error.userexists';
  static const String emailExistKey = 'error.emailexists';
  static const String successKey = 'success.settings';

  SettingsBloc({
    required AccountRepository accountRepository,
  })  : _accountRepository = accountRepository,
        super(const SettingsState()) {
    on<FirstnameChanged>(onFirstnameChanged);
    on<LastnameChanged>(onLastnameChanged);
    on<EmailChanged>(onEmailChanged);
    on<FormSubmitted>(onSubmitted);
    on<LoadCurrentUser>(onLoadCurrentUser);
  }

  void onFirstnameChanged(
    FirstnameChanged event,
    Emitter<SettingsState> emit,
  ) {
    final firstname = FirstnameInput.dirty(event.firstname);
    emit(state.copyWith(
        firstname: firstname,
        formStatus: FormzSubmissionStatus.inProgress,
        isValid: Formz.validate([
          state.email,
          state.lastname,
          firstname,
        ])));
  }

  void onLastnameChanged(
    LastnameChanged event,
    Emitter<SettingsState> emit,
  ) {
    final lastname = LastnameInput.dirty(event.lastname);
    emit(state.copyWith(
        lastname: lastname,
        formStatus: FormzSubmissionStatus.inProgress,
        isValid: Formz.validate([
          state.email,
          state.firstname,
          lastname,
        ])));
  }

  void onEmailChanged(
    EmailChanged event,
    Emitter<SettingsState> emit,
  ) {
    final email = EmailInput.dirty(event.email);
    emit(state.copyWith(
        email: email,
        formStatus: FormzSubmissionStatus.inProgress,
        isValid: Formz.validate([
          state.firstname,
          state.lastname,
          email,
        ])));
  }

  Future<void> onSubmitted(
    FormSubmitted event,
    Emitter<SettingsState> emit,
  ) async {
    if (state.isValid) {
      emit(
        state.copyWith(
          formStatus: FormzSubmissionStatus.inProgress,
        ),
      );

      User newCurrentUser = User(
        id: state.currentUser.id,
        login: state.currentUser.login,
        email: state.email.value,
        imageUrl: state.currentUser.imageUrl,
        firstName: state.firstname.value,
        lastName: state.lastname.value,
        activated: true,
        langKey: 'es',
        createdBy: 'system',
        createdDate: null,
        authorities: state.currentUser.authorities,
      );

      final result = await _accountRepository.saveAccount(newCurrentUser);

      result.fold(
        (Failure failure) {
          emit(
            state.copyWith(
              formStatus: FormzSubmissionStatus.failure,
              settingsStatusUI: SettingsStatusUI.error,
              generalNotificationKey: failure.errorMessage,
            ),
          );
        },
        (String data) {
          emit(
            state.copyWith(
                currentUser: newCurrentUser,
                formStatus: FormzSubmissionStatus.success,
                settingsStatusUI: SettingsStatusUI.done,
                generalNotificationKey: 'Ajustes actualizados correctamente.'),
          );
        },
      );
    }
  }

  Future<void> onLoadCurrentUser(
    LoadCurrentUser event,
    Emitter<SettingsState> emit,
  ) async {
    final result = await _accountRepository.getAccount();
    result.fold(
      (Failure failure) {
        emit(
          state.copyWith(
            settingsStatusUI: SettingsStatusUI.error,
            generalNotificationKey: failure.errorMessage,
          ),
        );
      },
      (User? data) {
        User? currentUser = data;

        if (currentUser != null) {
          String firstName = (currentUser.firstName ?? '');
          String lastName = (currentUser.lastName ?? '');
          String email = (currentUser.email ?? '');

          final firstNameInput = FirstnameInput.dirty(firstName);
          final lastNameInput = LastnameInput.dirty(lastName);
          final emailInput = EmailInput.dirty(email);

          emailController.text = email;
          lastNameController.text = lastName;
          firstNameController.text = firstName;

          emit(
            state.copyWith(
              firstname: firstNameInput,
              lastname: lastNameInput,
              email: emailInput,
              currentUser: currentUser,
              formStatus: FormzSubmissionStatus.initial,
              isValid: Formz.validate(
                [firstNameInput, lastNameInput, emailInput],
              ),
              settingsStatusUI: SettingsStatusUI.done,
            ),
          );
        } else {
          emit(
            state.copyWith(
              settingsStatusUI: SettingsStatusUI.error,
              generalNotificationKey: 'No se puede cargar el usuario.',
            ),
          );
        }
      },
    );
  }

  @override
  Future<void> close() {
    emailController.dispose();
    lastNameController.dispose();
    firstNameController.dispose();
    return super.close();
  }
}
