import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:formz/formz.dart';
import 'package:<%= baseName %>/core/constants/constants.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/settings/bloc/settings_bloc.dart';
import 'package:<%= baseName %>/account/settings/settings_routes.dart';
import 'package:<%= baseName %>/shared/repository/account_repository.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
import '../models/settings_models.dart';

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({Key? key}) : super(key: SettingsRoutes.screenKey);

  @override
  Widget build(BuildContext context) {
    return BlocProvider<SettingsBloc>(
      create: (context) => SettingsBloc(
        accountRepository: RepositoryProvider.of<AccountRepository>(context),
      )..add(LoadCurrentUser()),
      child: Scaffold(
        appBar: CustomAppBar(
          title: AppData.name,
        ),
        drawer: const CustomDrawer(),
        body: CustomLayout(
          title: Text(
            'Ajustes',
            style: Theme.of(context).textTheme.displayMedium,
          ),
          widgets: [
            BlocListener<SettingsBloc, SettingsState>(
              listener: (context, state) {
                if ((state.settingsStatusUI == SettingsStatusUI.done &&
                        state.generalNotificationKey != 'none') ||
                    state.settingsStatusUI == SettingsStatusUI.error) {
                  Color backgroundColor = Colors.green;
                  IconData iconData = Icons.info_outline_rounded;
                  if (state.formStatus.isFailure ||
                      state.settingsStatusUI == SettingsStatusUI.error) {
                    backgroundColor = Colors.red;
                    iconData = Icons.dangerous_outlined;
                  }
                  ScaffoldMessenger.of(context)
                    ..hideCurrentSnackBar()
                    ..showSnackBar(
                      getSnack(
                        context: context,
                        message: state.generalNotificationKey,
                        backgroundColor: backgroundColor,
                        iconData: iconData,
                      ),
                    );
                }
                if (state.settingsStatusUI == SettingsStatusUI.error) {
                  context.go('/home');
                }
              },
              child: SingleChildScrollView(
                child: Column(
                  children: <Widget>[
                    BlocBuilder<SettingsBloc, SettingsState>(
                      builder: (context, state) {
                        switch (state.settingsStatusUI) {
                          case SettingsStatusUI.done:
                            return Card(
                              elevation: 5,
                              shadowColor:
                                  Theme.of(context).colorScheme.primary,
                              surfaceTintColor:
                                  Theme.of(context).colorScheme.primary,
                              child: const SettingsForm(),
                            );
                          case SettingsStatusUI.error:
                          case SettingsStatusUI.init:
                          case SettingsStatusUI.loading:
                          default:
                            return const LoadingIndicator(
                              message: 'Consultando perfil',
                            );
                        }
                      },
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class SettingsForm extends StatelessWidget {
  const SettingsForm({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(10),
      child: Center(
        child: Container(
          constraints: const BoxConstraints(
            maxWidth: 600,
          ),
          child: const Form(
            child: Column(
              children: <Widget>[
                SizedBox(height: 30),
                FirstnameField(),
                SizedBox(height: 20),
                LastnameField(),
                SizedBox(height: 20),
                EmailField(),
                SizedBox(height: 20),
                Submit(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class FirstnameField extends StatelessWidget {
  const FirstnameField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SettingsBloc, SettingsState>(
      buildWhen: (previous, current) => previous.firstname != current.firstname,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 75,
              child: Text(
                'Nombre',
                style: Theme.of(context).textTheme.headlineSmall,
              ),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<SettingsBloc>().firstNameController,
                onChanged: (value) {
                  context
                      .read<SettingsBloc>()
                      .add(FirstnameChanged(firstname: value));
                },
                keyboardType: TextInputType.text,
                decoration: InputDecoration(
                    //labelText: 'Nombre',
                    errorText: state.firstname.displayError != null
                        ? FirstnameValidationError.invalid.invalidMessage
                        : null),
              ),
            ),
          ],
        );
      },
    );
  }
}

class LastnameField extends StatelessWidget {
  const LastnameField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SettingsBloc, SettingsState>(
        buildWhen: (previous, current) => previous.lastname != current.lastname,
        builder: (context, state) {
          return Row(
            children: [
              SizedBox(
                width: 75,
                child: Text(
                  'Apellido',
                  style: Theme.of(context).textTheme.headlineSmall,
                ),
              ),
              Expanded(
                child: TextFormField(
                  controller: context.read<SettingsBloc>().lastNameController,
                  onChanged: (value) {
                    context
                        .read<SettingsBloc>()
                        .add(LastnameChanged(lastname: value));
                  },
                  keyboardType: TextInputType.text,
                  decoration: InputDecoration(
                      //labelText: 'Apellido',
                      errorText: state.lastname.displayError != null
                          ? LastnameValidationError.invalid.invalidMessage
                          : null),
                ),
              ),
            ],
          );
        });
  }
}

class EmailField extends StatelessWidget {
  const EmailField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SettingsBloc, SettingsState>(
        buildWhen: (previous, current) => previous.email != current.email,
        builder: (context, state) {
          return Row(
            children: [
              SizedBox(
                width: 75,
                child: Text(
                  'Email',
                  style: Theme.of(context).textTheme.headlineSmall,
                ),
              ),
              Expanded(
                child: TextFormField(
                    controller: context.read<SettingsBloc>().emailController,
                    onChanged: (value) {
                      context
                          .read<SettingsBloc>()
                          .add(EmailChanged(email: value));
                    },
                    keyboardType: TextInputType.text,
                    decoration: InputDecoration(
                        //labelText: 'Email',
                        errorText: state.email.isNotValid
                            ? EmailValidationError.invalid.invalidMessage
                            : null)),
              ),
            ],
          );
        });
  }
}

class Submit extends StatelessWidget {
  const Submit({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SettingsBloc, SettingsState>(builder: (context, state) {
      return Padding(
        padding: const EdgeInsets.only(top: 30, bottom: 30),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              key: const Key('settingsForm_elevatedButton'),
              onPressed: state.isValid
                  ? () => context.read<SettingsBloc>().add(FormSubmitted())
                  : null,
              style: ButtonStyle(
                backgroundColor: WidgetStatePropertyAll(
                  context.read<ThemeBloc>().state == ThemeMode.dark
                      ? Theme.of(context).colorScheme.primaryContainer
                      : Theme.of(context).colorScheme.primary,
                ),
              ),
              child: const SizedBox(
                width: 200,
                height: 50,
                child: Center(
                  child: Text(
                    'Guardar',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      );
    });
  }
}