import 'dart:async';
import 'dart:convert';
import 'package:equatable/equatable.dart';
import 'package:hydrated_bloc/hydrated_bloc.dart';
import 'package:<%= baseName %>/account/user/models/user_model.dart';
import 'package:<%= baseName %>/shared/repository/account_repository.dart';
import 'package:<%= baseName %>/shared/repository/authentication_repository.dart';

part 'authentication_event.dart';
part 'authentication_state.dart';

class AuthenticationBloc
    extends HydratedBloc<AuthenticationEvent, AuthenticationState> {
  final AuthenticationRepository _authenticationRepository;
  final AccountRepository _accountRepository;
  late StreamSubscription<AuthenticationStatus>
      _authenticationStatusSubscription;

  AuthenticationBloc({
    required AuthenticationRepository authenticationRepository,
    required AccountRepository accountRepository,
  })  : _authenticationRepository = authenticationRepository,
        _accountRepository = accountRepository,
        super(const AuthenticationState()) {
    on<AuthenticationStatusChanged>(_onAuthenticationStatusChanged);
    on<AuthenticationLogoutRequested>(_onAuthenticationLogoutRequested);

    _authenticationStatusSubscription = _authenticationRepository.status.listen(
      (status) => add(AuthenticationStatusChanged(status)),
    );
  }

  bool get isAuthenticated =>
  state.status == AuthenticationStatus.authenticated;

  @override
  Future<void> close() {
    _authenticationStatusSubscription.cancel();
    return super.close();
  }

  Future<void> _onAuthenticationStatusChanged(
    AuthenticationStatusChanged event,
    Emitter<AuthenticationState> emit,
  ) async {
    switch (event.status) {
      case AuthenticationStatus.unauthenticated:
        return emit(state.copyWith(
          status: AuthenticationStatus.unauthenticated,
        ));
      case AuthenticationStatus.authenticated:
        final user = await _tryGetUser();
        if (user != null) {
          return emit(state.copyWith(
            status: AuthenticationStatus.authenticated,
            user: user,
          ));
        }
        return emit(state.copyWith(
          status: AuthenticationStatus.unauthenticated,
        ));
    }
  }

  void _onAuthenticationLogoutRequested(
    AuthenticationLogoutRequested event,
    Emitter<AuthenticationState> emit,
  ) {
    _authenticationRepository.logout();
  }

  Future<User?> _tryGetUser() async {
    try {
      final user = await _accountRepository.getAccount();
      return user;
    } catch (_) {
      return null;
    }
  }

  @override
  AuthenticationState? fromJson(Map<String, dynamic> json) {
    try {
      return AuthenticationState.fromMap(json);
    } catch (e) {
      throw Exception(e);
    }
  }

  @override
  Map<String, dynamic>? toJson(AuthenticationState state) {
    try {
      if (state.status == AuthenticationStatus.unauthenticated) {
        return null;
      }
      return {'status': state.status.index, 'user': state.user.toJson()};
    } catch (e) {
      throw Exception(e);
    }
  }
}
