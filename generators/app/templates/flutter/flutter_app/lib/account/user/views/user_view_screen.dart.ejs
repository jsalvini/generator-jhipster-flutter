import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:multi_select_flutter/multi_select_flutter.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
import 'package:<%= baseName %>/account/user/bloc/user_bloc.dart';
import 'package:<%= baseName %>/account/authority/bloc/authority_bloc.dart';
import 'package:<%= baseName %>/core/constants/constants.dart';
import '../user_routes.dart';

class UserViewScreen extends StatelessWidget {
  const UserViewScreen({Key? key}) : super(key: UserRoutes.createScreenKey);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(
        title: AppData.name,
      ),
      body: CustomLayout(
        title: Text(
          'Detalle usuario',
          style: Theme.of(context).textTheme.displayMedium,
        ),
        widgets: [
          SingleChildScrollView(
            child: BlocBuilder<UserBloc, UserState>(
              buildWhen: (previous, current) =>
                  previous.loadedUser != current.loadedUser,
              builder: (context, state) {
                return Visibility(
                  visible: state.userStatusUI == UserStatusUI.done,
                  replacement: const LoadingIndicator(
                    message: 'CARGANDO',
                  ),
                  child: Column(
                    children: <Widget>[
                      Card(
                        elevation: 5,
                        surfaceTintColor: Theme.of(context).colorScheme.primary,
                        shadowColor: Theme.of(context).colorScheme.primary,
                        child: const FormUser(),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class FormUser extends StatelessWidget {
  const FormUser({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Center(
        child: Container(
          constraints: const BoxConstraints(
            maxWidth: 600,
          ),
          child: const Form(
            child: Column(
              children: <Widget>[
                LoginField(),
                SizedBox(height: 20),
                FirstNameField(),
                SizedBox(height: 20),
                LastNameField(),
                SizedBox(height: 20),
                EmailField(),
                SizedBox(height: 20),
                ActivatedField(),
                SizedBox(height: 20),
                CreatedByField(),
                SizedBox(height: 20),
                CreatedDateField(),
                SizedBox(height: 20),
                LastModifiedByField(),
                SizedBox(height: 20),
                LastModifiedDateField(),
                SizedBox(height: 20),
                AutorityField(),
                SizedBox(height: 20),
                EditButton(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class EditButton extends StatelessWidget {
  const EditButton({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.loadedUser.id != current.loadedUser.id,
      builder: (context, state) {
        return Padding(
          padding: const EdgeInsets.only(top: 30),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () => context
                    .push('${UserRoutes.editPath}${state.loadedUser.login}'),
                style: ButtonStyle(
                    backgroundColor:
                        WidgetStatePropertyAll(Theme.of(context).primaryColor)),
                child: SizedBox(
                  width: MediaQuery.of(context).size.width * 0.2,
                  height: 50,
                  child: const Center(
                    child: Text(
                      'Editar',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18.0,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

class LoginField extends StatelessWidget {
  const LoginField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.login != current.login,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text(
                'Usuario',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().loginController,
                readOnly: true,
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.text_fields_rounded),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class FirstNameField extends StatelessWidget {
  const FirstNameField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.firstName != current.firstName,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text(
                'Nombre',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().firstNameController,
                readOnly: true,
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.text_fields_rounded),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class LastNameField extends StatelessWidget {
  const LastNameField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.lastName != current.lastName,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text('Apellido',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().lastNameController,
                readOnly: true,
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.text_fields_rounded),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class EmailField extends StatelessWidget {
  const EmailField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.email != current.email,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text('Email',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().emailController,
                readOnly: true,
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.text_fields_rounded),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class ActivatedField extends StatelessWidget {
  const ActivatedField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.activated != current.activated,
      builder: (context, state) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: <Widget>[
            SizedBox(
              width: 130,
              child: Text(
                'Activado',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
            ),
            Switch(
              value: state.activated.value,
              onChanged: null,
              activeColor: Theme.of(context).primaryColor,
            ),
          ],
        );
      },
    );
  }
}

class LangKeyField extends StatelessWidget {
  const LangKeyField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
        buildWhen: (previous, current) => previous.langKey != current.langKey,
        builder: (context, state) {
          return TextFormField(
            controller: context.read<UserBloc>().langKeyController,
            readOnly: true,
            keyboardType: TextInputType.text,
            style: const TextStyle(
              color: Color(0xff1b070b),
              fontSize: 16,
            ),
            decoration: const InputDecoration(
              prefixIcon: Icon(Icons.text_fields_rounded),
              labelText: 'Idioma',
              labelStyle: TextStyle(
                height: 0.5,
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
              floatingLabelStyle: TextStyle(
                height: 0.5,
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
              contentPadding: EdgeInsets.symmetric(vertical: 10),
            ),
          );
        });
  }
}

class CreatedByField extends StatelessWidget {
  const CreatedByField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.createdBy != current.createdBy,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text('Creado por',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().createdByController,
                readOnly: true,
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                maxLength: 50,
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.text_fields_rounded),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class CreatedDateField extends StatelessWidget {
  const CreatedDateField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.createdDate != current.createdDate,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text('Creado',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: FormBuilderDateTimePicker(
                name: 'createdDate',
                enabled: false,
                controller: context.read<UserBloc>().createdDateController,
                initialEntryMode: DatePickerEntryMode.calendar,
                initialValue: state.loadedUser.createdDate != null
                    ? state.loadedUser.createdDate!.isNotEmpty
                        ? DateTime.parse(state.loadedUser.createdDate!)
                        : null
                    : null,
                format: DateFormat('yyyy-MM-dd HH:mm:ss'),
                inputType: InputType.both,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.date_range_rounded),
                ),
                initialTime: const TimeOfDay(hour: 8, minute: 0),
                keyboardType: TextInputType.datetime,
              ),
            ),
          ],
        );
      },
    );
  }
}

class LastModifiedByField extends StatelessWidget {
  const LastModifiedByField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.lastModifiedBy != current.lastModifiedBy,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text('Modificado por',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().lastModifiedByController,
                readOnly: true,
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                maxLength: 50,
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.text_fields_rounded),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class LastModifiedDateField extends StatelessWidget {
  const LastModifiedDateField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.lastModifiedDate != current.lastModifiedDate,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 130,
              child: Text(
                'Modificado',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
            ),
            Expanded(
              child: FormBuilderDateTimePicker(
                name: 'lastModified',
                controller: context.read<UserBloc>().lastModifiedDateController,
                enabled: false,
                format: DateFormat("yyyy-MM-dd HH:mm:ss"),
                keyboardType: TextInputType.datetime,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: const InputDecoration(
                  prefixIcon: Icon(Icons.date_range_rounded),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class AutorityField extends StatelessWidget {
  const AutorityField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
        previous.loadedUser.authorities != current.loadedUser.authorities,
      builder: (context, state) {
        return BlocBuilder<AuthorityBloc, AuthorityState>(
          builder: (context, authorityState) {
            if (authorityState.authorityStatusUI == AuthorityStatusUI.done) {
              return Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.only(top: 20, bottom: 20),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        Text(
                          'Perfiles',
                          style: Theme.of(context).textTheme.headlineMedium,
                        ),
                      ],
                    ),
                  ),
                  MultiSelectChipDisplay(
                    items: state.loadedUser.authorities
                        .map((e) => MultiSelectItem(e, e))
                        .toList(),
                    onTap: (value) {},
                  ),
                ],
              );
            }
            if (authorityState.authorityStatusUI == AuthorityStatusUI.loading) {
              return const LoadingIndicator(
                message: 'Cargando perfiles',
              );
            }
            return const Center(child: CircularProgressIndicator());
          },
        );
      },
    );
  }
}