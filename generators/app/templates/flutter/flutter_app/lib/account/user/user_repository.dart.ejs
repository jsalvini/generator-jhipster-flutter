import 'dart:convert';
import 'package:dartz/dartz.dart';
import 'package:http/http.dart';
import 'package:<%= baseName %>/account/user/models/user_response.dart';
import 'package:<%= baseName %>/core/exceptions/exception.dart';
import 'package:<%= baseName %>/core/exceptions/failure.dart';
import 'package:<%= baseName %>/account/user/models/user_models.dart';
import 'package:<%= baseName %>/shared/exceptions/app_exception.dart';
import 'package:<%= baseName %>/shared/models/error_response.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';
import 'package:dart_json_mapper/dart_json_mapper.dart';

class UserRepository {
  UserRepository();

  static const String uriEndpoint = '/admin/users';

  Future<Either<Failure, UserResponse>> getAllUsers({
    required int page,
    required String sort,
    required String ascending,
  }) async {
    final newUriEndpoint =
        '$uriEndpoint?sort=$sort%2C$ascending&page=$page&size=20';
    try {
      final Response response = await HttpUtils.getRequest(newUriEndpoint);

      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse = JsonMapper.deserialize<ErrorResponse>(
            utf8.decode(response.bodyBytes));
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }

      int count = int.parse(response.headers['x-total-count']!);
      String link = response.headers['link'] as String;

      final decode = utf8.decode(response.bodyBytes);
      const JsonDecoder decoder = JsonDecoder();
      List<User> users = [];
      final decodeResponse = decoder.convert(decode);

      for (var user in decodeResponse) {
        final newUser = User.fromMap(user);
        users.add(newUser);
      }

      //List<User>? users = JsonMapper.deserialize<List<User>>(decode);

      UserResponse userResponse =
          UserResponse(users: users, totalCount: count, link: link);

      return Right(userResponse);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    } on Exception catch (e) {
      return Left(
        ServerFailure(errorMessage: 'Error al conversi√≥n. $e'),
      );
    }
  }

  Future<Either<Failure, User?>> getUser(String login) async {
    try {
      final Response response =
          await HttpUtils.getRequest('$uriEndpoint/$login');
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse = JsonMapper.deserialize<ErrorResponse>(
            utf8.decode(response.bodyBytes));
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      const JsonDecoder decoder = JsonDecoder();
      User? user =
          User.fromMap(decoder.convert(utf8.decode(response.bodyBytes)));
      //User? user = JsonMapper.deserialize<User>(utf8.decode(response.bodyBytes));
      return Right(user);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, User?>> create(User user) async {
    try {
      final Response response = await HttpUtils.postRequest(uriEndpoint, user);
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse = JsonMapper.deserialize<ErrorResponse>(
            utf8.decode(response.bodyBytes));
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      //User? newUser = JsonMapper.deserialize<User>(utf8.decode(response.bodyBytes));
      const JsonDecoder decoder = JsonDecoder();
      var decode = utf8.decode(response.bodyBytes);
      //print('Create user: $decode');
      User? newUser = User.fromMap(decoder.convert(decode));
      return Right(newUser);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, User?>> update(User user) async {
    try {
      final Response response = await HttpUtils.putRequest(uriEndpoint, user);
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse = JsonMapper.deserialize<ErrorResponse>(
            utf8.decode(response.bodyBytes));
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      //User? updatedUser = JsonMapper.deserialize<User>(utf8.decode(response.bodyBytes));
      const JsonDecoder decoder = JsonDecoder();
      User? updatedUser =
          User.fromMap(decoder.convert(utf8.decode(response.bodyBytes)));
      return Right(updatedUser);
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }

  Future<Either<Failure, String>> delete(String login) async {
    try {
      final Response response =
          await HttpUtils.deleteRequest('$uriEndpoint/$login');
      if (response.statusCode >= 300 && response.statusCode < 600) {
        ErrorResponse? errorResponse = JsonMapper.deserialize<ErrorResponse>(
            utf8.decode(response.bodyBytes));
        if (errorResponse != null) {
          return Left(
            ServerFailure(errorMessage: errorResponse.detail!),
          );
        }
      }
      return const Right("OK");
    } on ServerException catch (e) {
      return Left(
        ServerFailure(errorMessage: e.errorMessage),
      );
    } on FetchDataException catch (e) {
      return Left(
        ServerFailure(errorMessage: '${e.prefix} ${e.message}'),
      );
    }
  }
}
