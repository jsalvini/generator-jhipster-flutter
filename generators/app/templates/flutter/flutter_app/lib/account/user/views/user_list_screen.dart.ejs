import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:<%= baseName %>/core/constants/constants.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/user/bloc/user_bloc.dart';
import 'package:<%= baseName %>/account/user/models/user_model.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
import '../user_routes.dart';
import 'user_table.dart';

class UserListScreen extends StatelessWidget {
  UserListScreen({Key? key}) : super(key: UserRoutes.listScreenKey);
  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    return BlocListener<UserBloc, UserState>(
      listener: (context, state) {
        if (state.deleteStatus == UserDeleteStatus.ok ||
            state.deleteStatus == UserDeleteStatus.error) {
          Color backgroundColor = Colors.green;
          IconData iconData = Icons.info_outline_rounded;
          if (state.deleteStatus == UserDeleteStatus.error) {
            backgroundColor = Colors.red;
            iconData = Icons.dangerous_outlined;
          }

          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(
              getSnack(
                context: context,
                message: state.generalNotificationKey,
                backgroundColor: backgroundColor,
                iconData: iconData,
              ),
            );
        }
      },
      child: Scaffold(
        key: scaffoldKey,
        appBar: CustomAppBar(
          title: AppData.name,
        ),
        drawer: const CustomDrawer(),
        body: CustomLayout(
          title: Text(
            'Usuarios',
            style: Theme.of(context).textTheme.displayMedium,
          ),
          widgets: const [
            UserView(),
          ],
        ),
      ),
    );
  }
}

class UserView extends StatelessWidget {
  const UserView({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      builder: (context, state) {
        switch (state.userStatusUI) {
          case UserStatusUI.done:
            List<User> userList = state.users;
            return UserTable(
              users: userList,
              blocContext: context,
            );
          case UserStatusUI.loading:
            return const LoadingIndicator(
              message: 'CARGANDO',
            );
          case UserStatusUI.error:
            return ErrorView(message: state.generalNotificationKey);
          default:
            return const LoadingIndicator(
              message: 'CARGANDO',
            );
        }
      },
    );
  }
}