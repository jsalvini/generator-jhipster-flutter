import 'package:flutter/material.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:form_builder_validators/form_builder_validators.dart';
import 'package:formz/formz.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:multi_select_flutter/multi_select_flutter.dart';
import 'package:<%= baseName %>/shared/widgets/widgets.dart';
import 'package:<%= baseName %>/account/authority/bloc/authority_bloc.dart';
import 'package:<%= baseName %>/core/constants/constants.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/user/bloc/user_bloc.dart';
import 'package:<%= baseName %>/account/user/models/user_models.dart';
import '../user_routes.dart';

class UserUpdateScreen extends StatelessWidget {
  const UserUpdateScreen({Key? key}) : super(key: UserRoutes.editScreenKey);

  @override
  Widget build(BuildContext context) {
    return BlocListener<UserBloc, UserState>(
      listener: (context, state) {
        if (state.userStatusUI == UserStatusUI.ok ||
            state.userStatusUI == UserStatusUI.error) {
          Color backgroundColor = Colors.green;
          IconData iconData = Icons.info_outline_rounded;
          if (state.userStatusUI == UserStatusUI.error) {
            backgroundColor = Colors.red;
            iconData = Icons.dangerous_outlined;
          }

          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(
              getSnack(
                context: context,
                message: state.generalNotificationKey,
                backgroundColor: backgroundColor,
                iconData: iconData,
              ),
            );
          context.pushNamed('user');
        }
      },
      child: Scaffold(
        appBar: CustomAppBar(
          title: AppData.name,
        ),
        body: CustomLayout(
          title: BlocBuilder<UserBloc, UserState>(
            buildWhen: (previous, current) =>
                previous.editMode != current.editMode,
            builder: (context, state) {
              String title =
                  state.editMode ? 'Editar usuario' : 'Crear usuario';
              return Text(
                title,
                style: Theme.of(context).textTheme.displayMedium,
              );
            },
          ),
          widgets: [
            SingleChildScrollView(
              child: Column(
                children: <Widget>[
                  Card(
                    elevation: 5,
                    surfaceTintColor: Theme.of(context).colorScheme.primary,
                    shadowColor: Theme.of(context).colorScheme.primary,
                    child: const FormUser(),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class FormUser extends StatelessWidget {
  const FormUser({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Center(
        child: Container(
          constraints: const BoxConstraints(
            maxWidth: 700,
          ),
          child: const Form(
            child: Column(
              children: <Widget>[
                LoginField(),
                SizedBox(height: 20),
                FirstNameField(),
                SizedBox(height: 20),
                LastNameField(),
                SizedBox(height: 20),
                EmailField(),
                SizedBox(height: 20),
                ActivatedField(),
                SizedBox(height: 20),
                AutorityField(),
                SubmitForm(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class SubmitForm extends StatelessWidget {
  const SubmitForm({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      builder: (context, state) {
        return state.formStatus.isInProgress
            ? const Padding(
                padding: EdgeInsets.only(top: 30),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                  ],
                ),
              )
            : Padding(
                padding: const EdgeInsets.only(top: 30),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    ElevatedButton(
                      key: const Key('userForm_elevatedButton'),
                      onPressed: state.isValid
                          ? () =>
                              context.read<UserBloc>().add(UserFormSubmitted())
                          : null,
                      style: ButtonStyle(
                        backgroundColor: WidgetStatePropertyAll(
                          state.isValid
                              ? context.read<ThemeBloc>().state ==
                                      ThemeMode.dark
                                  ? Theme.of(context)
                                      .colorScheme
                                      .secondaryContainer
                                  : Theme.of(context).colorScheme.primary
                              : context.read<ThemeBloc>().state ==
                                      ThemeMode.dark
                                  ? Theme.of(context)
                                      .colorScheme
                                      .primary
                                      .withOpacity(0.3)
                                  : Theme.of(context)
                                      .colorScheme
                                      .secondary
                                      .withOpacity(0.3),
                        ),
                      ),
                      child: SizedBox(
                        width: MediaQuery.of(context).size.width * 0.2,
                        height: 50,
                        child: const Center(
                          child: Text(
                            'Guardar',
                            style: TextStyle(color: Colors.white, fontSize: 18),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              );
      },
    );
  }
}

class LoginField extends StatelessWidget {
  const LoginField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.login != current.login,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 75,
              child: Text(
                'Usuario',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().loginController,
                enabled: true,
                onChanged: (value) {
                  context.read<UserBloc>().add(UserLoginChanged(login: value));
                },
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: InputDecoration(
                  prefixIcon: const Icon(Icons.text_fields_rounded),
                  errorText: state.login.displayError != null
                      ? '${state.login.error?.invalidMessage()}'
                      : null,
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class FirstNameField extends StatelessWidget {
  const FirstNameField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.firstName != current.firstName,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 75,
              child: Text('Nombre',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().firstNameController,
                enabled: true,
                onChanged: (value) {
                  context
                      .read<UserBloc>()
                      .add(UserFirstNameChanged(firstName: value));
                },
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: InputDecoration(
                  prefixIcon: const Icon(Icons.text_fields_rounded),
                  //labelText: 'Nombre',
                  errorText: state.firstName.displayError != null
                      ? '${state.firstName.error?.invalidMessage()}'
                      : null,
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class LastNameField extends StatelessWidget {
  const LastNameField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.lastName != current.lastName,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 75,
              child: Text('Apellido',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().lastNameController,
                enabled: true,
                onChanged: (value) {
                  context
                      .read<UserBloc>()
                      .add(UserLastNameChanged(lastName: value));
                },
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: InputDecoration(
                  prefixIcon: const Icon(Icons.text_fields_rounded),
                  //labelText: 'Apellido',
                  errorText: state.lastName.displayError != null
                      ? '${state.lastName.error?.invalidMessage()}'
                      : null,
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class EmailField extends StatelessWidget {
  const EmailField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.email != current.email,
      builder: (context, state) {
        return Row(
          children: [
            SizedBox(
              width: 75,
              child: Text('Email',
                  style: Theme.of(context).textTheme.headlineMedium),
            ),
            Expanded(
              child: TextFormField(
                controller: context.read<UserBloc>().emailController,
                enabled: true,
                onChanged: (value) {
                  context.read<UserBloc>().add(UserEmailChanged(email: value));
                },
                keyboardType: TextInputType.text,
                style: const TextStyle(
                  color: Color(0xff1b070b),
                  fontSize: 16,
                ),
                decoration: InputDecoration(
                  prefixIcon: const Icon(Icons.email_rounded),
                  //labelText: 'Email',
                  errorText: state.email.displayError != null
                      ? '${state.email.error?.invalidMessage()}'
                      : null,
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class ImageUrlField extends StatelessWidget {
  const ImageUrlField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
        buildWhen: (previous, current) => previous.imageUrl != current.imageUrl,
        builder: (context, state) {
          return TextFormField(
            controller: context.read<UserBloc>().imageUrlController,
            enabled: true,
            onChanged: (value) {
              context
                  .read<UserBloc>()
                  .add(UserImageUrlChanged(imageUrl: value));
            },
            keyboardType: TextInputType.text,
            style: const TextStyle(
              color: Color(0xff1b070b),
              fontSize: 16,
            ),
            decoration: InputDecoration(
              prefixIcon: const Icon(Icons.text_fields_rounded),
              labelText: 'ImageUrl',
              labelStyle: const TextStyle(
                height: 0.5,
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
              floatingLabelStyle: const TextStyle(
                height: 0.5,
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
              contentPadding: const EdgeInsets.symmetric(vertical: 10),
              errorText: state.imageUrl.displayError != null
                  ? '${state.imageUrl.error?.invalidMessage()}'
                  : null,
            ),
          );
        });
  }
}

class ActivatedField extends StatelessWidget {
  const ActivatedField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.activated != current.activated,
      builder: (context, state) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: <Widget>[
            SizedBox(
              width: 75,
              child: Text(
                'Activado',
                style: Theme.of(context).textTheme.headlineMedium,
              ),
            ),
            Switch(
              value: state.activated.value,
              onChanged: (value) {
                context
                    .read<UserBloc>()
                    .add(UserActivatedChanged(activated: value));
              },
              activeColor: Theme.of(context).primaryColor,
            ),
          ],
        );
      },
    );
  }
}

class LangKeyField extends StatelessWidget {
  const LangKeyField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.langKey != current.langKey,
      builder: (context, state) {
        return TextFormField(
          controller: context.read<UserBloc>().langKeyController,
          enabled: true,
          onChanged: (value) {
            context.read<UserBloc>().add(UserLangKeyChanged(langKey: value));
          },
          keyboardType: TextInputType.text,
          style: const TextStyle(
            color: Color(0xff1b070b),
            fontSize: 16,
          ),
          decoration: InputDecoration(
            prefixIcon: const Icon(Icons.text_fields_rounded),
            labelText: 'LangKey',
            labelStyle: const TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            floatingLabelStyle: const TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
            contentPadding: const EdgeInsets.symmetric(vertical: 10),
            errorText: state.langKey.displayError != null
                ? '${state.langKey.error?.invalidMessage()}'
                : null,
          ),
        );
      },
    );
  }
}

class CreatedByField extends StatelessWidget {
  const CreatedByField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) => previous.createdBy != current.createdBy,
      builder: (context, state) {
        return TextFormField(
          controller: context.read<UserBloc>().createdByController,
          enabled: true,
          onChanged: (value) {
            context
                .read<UserBloc>()
                .add(UserCreatedByChanged(createdBy: value));
          },
          keyboardType: TextInputType.text,
          style: const TextStyle(
            color: Color(0xff1b070b),
            fontSize: 16,
          ),
          maxLength: 50,
          decoration: InputDecoration(
            prefixIcon: const Icon(Icons.text_fields_rounded),
            labelText: 'CreatedBy',
            labelStyle: const TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            floatingLabelStyle: const TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
            contentPadding: const EdgeInsets.symmetric(vertical: 10),
            errorText: state.createdBy.displayError != null
                ? '${state.createdBy.error?.invalidMessage()}'
                : null,
          ),
        );
      },
    );
  }
}

class CreatedDateField extends StatelessWidget {
  const CreatedDateField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.createdDate != current.createdDate,
      builder: (context, state) {
        return FormBuilderDateTimePicker(
          name: 'createdDate',
          controller: context.read<UserBloc>().createdDateController,
          initialEntryMode: DatePickerEntryMode.calendar,
          initialValue: state.loadedUser.createdDate != null
              ? DateTime.parse(state.loadedUser.createdDate!)
              : DateTime.now(),
          format: DateFormat('yyyy-MM-dd'),
          inputType: InputType.both,
          style: const TextStyle(
            color: Color(0xff1b070b),
            fontSize: 16,
          ),
          decoration: const InputDecoration(
            prefixIcon: Icon(Icons.date_range_rounded),
            labelText: 'CreatedDate',
            hintText: 'Ejemplo: 2024-01-24',
            labelStyle: TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            floatingLabelStyle: TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
          ),
          initialTime: const TimeOfDay(hour: 8, minute: 0),
          keyboardType: TextInputType.datetime,
          onChanged: (DateTime? newValue) {
            if (newValue != null) {
              //DateFormat formato = DateFormat("yyyy-MM-ddTHH:mm:ss.SSS'Z'");
              //String value = formato.format(newValue);
              context
                  .read<UserBloc>()
                  .add(UserCreatedDateChanged(createdDate: newValue));
            }
          },
          validator: FormBuilderValidators.compose(
            [
              FormBuilderValidators.required(
                  errorText: '* Debe seleccionar un valor.'),
            ],
          ),
        );
      },
    );
  }
}

class LastModifiedByField extends StatelessWidget {
  const LastModifiedByField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.lastModifiedBy != current.lastModifiedBy,
      builder: (context, state) {
        return TextFormField(
          controller: context.read<UserBloc>().lastModifiedByController,
          enabled: true,
          onChanged: (value) {
            context
                .read<UserBloc>()
                .add(UserLastModifiedByChanged(lastModifiedBy: value));
          },
          keyboardType: TextInputType.text,
          maxLength: 50,
          decoration: InputDecoration(
            prefixIcon: const Icon(Icons.text_fields_rounded),
            labelText: 'LastModifiedBy',
            labelStyle: const TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            floatingLabelStyle: const TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
            contentPadding: const EdgeInsets.symmetric(vertical: 10),
            errorText: state.lastModifiedBy.displayError != null
                ? '${state.lastModifiedBy.error?.invalidMessage()}'
                : null,
          ),
        );
      },
    );
  }
}

class LastModifiedDateField extends StatelessWidget {
  const LastModifiedDateField({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.lastModifiedDate != current.lastModifiedDate,
      builder: (context, state) {
        return FormBuilderDateTimePicker(
          name: 'lastModified',
          controller: context.read<UserBloc>().lastModifiedDateController,
          enabled: true,
          initialEntryMode: DatePickerEntryMode.calendar,
          initialValue: state.loadedUser.lastModifiedDate != null
              ? DateTime.parse(state.loadedUser.lastModifiedDate!)
              : DateTime.now(),
          format: DateFormat('yyyy-MM-dd'),
          inputType: InputType.both,
          style: const TextStyle(
            color: Color(0xff1b070b),
            fontSize: 16,
          ),
          decoration: const InputDecoration(
            prefixIcon: Icon(Icons.date_range_rounded),
            labelText: 'LastModifiedDate',
            hintText: 'Ejemplo: 2024-01-24',
            labelStyle: TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            floatingLabelStyle: TextStyle(
              height: 0.5,
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
          ),
          initialTime: const TimeOfDay(hour: 8, minute: 0),
          keyboardType: TextInputType.datetime,
          onChanged: (DateTime? newValue) {
            if (newValue != null) {
              //DateFormat formato = DateFormat("yyyy-MM-ddTHH:mm:ss.SSS'Z'");
              //String value = formato.format(newValue);
              context
                  .read<UserBloc>()
                  .add(UserLastModifiedDateChanged(lastModifiedDate: newValue));
            }
          },
          validator: FormBuilderValidators.compose(
            [
              FormBuilderValidators.required(
                  errorText: '* Debe seleccionar un valor.'),
            ],
          ),
        );
      },
    );
  }
}

class AutorityField extends StatelessWidget {
  const AutorityField({super.key});

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;

    return BlocBuilder<UserBloc, UserState>(
      buildWhen: (previous, current) =>
          previous.authorities != current.authorities,
      builder: (context, state) {
        return BlocBuilder<AuthorityBloc, AuthorityState>(
          builder: (context, authorityState) {
            if (authorityState.authorityStatusUI == AuthorityStatusUI.done) {
              List<String> authorityList = authorityState.authorities;
              final List<MultiSelectItem<String>> items = authorityList
                  .map((authority) =>
                      MultiSelectItem<String>(authority, authority))
                  .toList();
              List<String> selectedAuthorities = [];

              return MultiSelectDialogField<String>(
                items: items,
                listType: MultiSelectListType.LIST,
                title: const Text("Perfiles de usuario"),
                selectedItemsTextStyle:
                    context.read<ThemeBloc>().state == ThemeMode.dark
                        ? const TextStyle(color: Colors.white)
                        : const TextStyle(color: Colors.black),
                itemsTextStyle:
                    context.read<ThemeBloc>().state == ThemeMode.dark
                        ? const TextStyle(color: Colors.white)
                        : const TextStyle(color: Colors.black),
                unselectedColor: Colors.grey,
                chipDisplay: MultiSelectChipDisplay(
                  chipColor: Colors.green,
                  icon: const Icon(
                    Icons.check,
                    color: Colors.white,
                  ),
                  textStyle: const TextStyle(color: Colors.white),
                ),
                initialValue: state.authorities.isEmpty
                    ? ['ROLE_USER']
                    : state.authorities,
                decoration: BoxDecoration(
                  color: Theme.of(context).primaryColor.withOpacity(0.1),
                  borderRadius: const BorderRadius.all(Radius.circular(40)),
                  border: Border.all(
                    color: Theme.of(context).colorScheme.primary,
                    width: 2,
                  ),
                ),
                cancelText: const Text('CANCELAR'),
                confirmText: const Text('OK'),
                searchable: true,
                dialogWidth: size.width * 0.4,
                dialogHeight: size.height * 0.3,
                buttonIcon: Icon(
                  Icons.people_alt_rounded,
                  color: Theme.of(context).colorScheme.primary,
                ),
                buttonText: Text(
                  "Seleccione perfiles de usuario",
                  style: TextStyle(
                    color: Theme.of(context).colorScheme.primary,
                    fontSize: 16,
                  ),
                ),
                onConfirm: (results) {
                  selectedAuthorities = [];
                  selectedAuthorities.addAll(results);
                  context.read<UserBloc>().add(
                      UserAuthoritiesChanged(authorities: selectedAuthorities));
                },
              );
            }
            if (authorityState.authorityStatusUI == AuthorityStatusUI.loading) {
              return const LoadingIndicator(
                message: 'CARGANDO',
              );
            }
            return const Center(child: CircularProgressIndicator());
          },
        );
      },
    );
  }
}
