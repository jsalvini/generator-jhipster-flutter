import 'package:adaptive_scrollbar/adaptive_scrollbar.dart';
import 'package:data_table_2/data_table_2.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:pager/pager.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/user/bloc/user_bloc.dart';
import 'package:<%= baseName %>/account/user/models/user_model.dart';
import 'package:<%= baseName %>/account/user/views/widgets/user_delete_dialog.dart';
import 'package:<%= baseName %>/account/user/user_routes.dart';
// jhipster-merlin-needle-import-add

class UserTable extends StatelessWidget {
  UserTable({
    super.key,
    required this.users,
    required this.blocContext,
  });

  final List<User> users;
  final BuildContext blocContext;
  final ScrollController horizontalScroll = ScrollController();
  final ScrollController verticalScroll = ScrollController();
  final double widthScrollbar = 10.0;

  @override
  Widget build(BuildContext context) {
    final widthSize = MediaQuery.of(context).size.width;
    final heigthSize = MediaQuery.of(context).size.height;

    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.only(top: 10, right: 16, left: 16),
          child: Card(
            margin: EdgeInsets.zero,
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  ElevatedButton.icon(
                    onPressed: () => context.push(UserRoutes.create),
                    style: ButtonStyle(
                      elevation: const MaterialStatePropertyAll(5.0),
                      minimumSize:
                          const MaterialStatePropertyAll(Size(250, 50)),
                      backgroundColor: MaterialStatePropertyAll(
                        context.read<ThemeBloc>().state == ThemeMode.dark
                            ? Theme.of(context).colorScheme.primaryContainer
                            : Theme.of(context).colorScheme.primary,
                      ),
                    ),
                    icon: const Icon(Icons.add, color: Colors.white),
                    label: const Text(
                      'Agregar usuario',
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                  const SizedBox(width: 10),
                  ElevatedButton.icon(
                    onPressed: () {
                      int pageQuery =
                          blocContext.read<UserBloc>().state.currentPage - 1;
                      String columnName =
                          blocContext.read<UserBloc>().state.columnName;
                      var order =
                          blocContext.read<UserBloc>().state.sortAscending
                              ? 'asc'
                              : 'desc';
                      blocContext.read<UserBloc>().add(LoadUserList(
                            page: pageQuery,
                            sort: columnName,
                            ascending: order,
                          ));
                    },
                    style: ButtonStyle(
                      elevation: const MaterialStatePropertyAll(5.0),
                      minimumSize:
                          const MaterialStatePropertyAll(Size(200, 50)),
                      backgroundColor: MaterialStatePropertyAll(
                        context.read<ThemeBloc>().state == ThemeMode.dark
                            ? Theme.of(context).colorScheme.primaryContainer
                            : Theme.of(context).colorScheme.primary,
                      ),
                    ),
                    icon:
                        const Icon(Icons.refresh_rounded, color: Colors.white),
                    label: const Text(
                      'Actualizar lista',
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(16),
          child: Theme(
            data: ThemeData(
                iconTheme: const IconThemeData(color: Colors.white),
                scrollbarTheme: ScrollbarThemeData(
                    thickness: MaterialStateProperty.all(5),
                    thumbVisibility: MaterialStateProperty.all(true),
                    thumbColor: MaterialStateProperty.all<Color>(
                        Theme.of(context).primaryColor))),
            child: SizedBox(
              height: !kIsWeb ? heigthSize * 0.70 : heigthSize * 0.65,
              child: Card(
                margin: EdgeInsets.zero,
                elevation: 4,
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ClipRRect(
                    borderRadius: const BorderRadius.all(Radius.circular(15)),
                    child: AdaptiveScrollbar(
                      controller: verticalScroll,
                      width: widthScrollbar,
                      scrollToClickDelta: 75,
                      scrollToClickFirstDelay: 200,
                      scrollToClickOtherDelay: 50,
                      sliderDecoration: BoxDecoration(
                          color: Theme.of(context).colorScheme.primary,
                          borderRadius:
                              const BorderRadius.all(Radius.circular(12.0))),
                      sliderActiveDecoration: const BoxDecoration(
                          color: Color.fromRGBO(206, 206, 206, 100),
                          borderRadius:
                              BorderRadius.all(Radius.circular(12.0))),
                      underColor: Colors.transparent,
                      child: AdaptiveScrollbar(
                        underSpacing: const EdgeInsets.only(bottom: 20),
                        controller: horizontalScroll,
                        width: widthScrollbar,
                        position: ScrollbarPosition.bottom,
                        sliderDecoration: BoxDecoration(
                            color: Theme.of(context).colorScheme.primary,
                            borderRadius:
                                const BorderRadius.all(Radius.circular(12.0))),
                        sliderActiveDecoration: const BoxDecoration(
                            color: Color.fromRGBO(206, 206, 206, 100),
                            borderRadius:
                                BorderRadius.all(Radius.circular(12.0))),
                        underColor: Colors.transparent,
                        child: SingleChildScrollView(
                          controller: horizontalScroll,
                          scrollDirection: Axis.horizontal,
                          child: SizedBox(
                            width: 2000,
                            child: DataTable2(
                              headingRowColor: MaterialStateColor.resolveWith(
                                  (states) => Theme.of(context).primaryColor),
                              headingTextStyle:
                                  const TextStyle(color: Colors.white),
                              headingCheckboxTheme: const CheckboxThemeData(
                                side:
                                    BorderSide(color: Colors.white, width: 2.0),
                              ),
                              isHorizontalScrollBarVisible: false,
                              isVerticalScrollBarVisible: false,
                              columnSpacing: 12,
                              horizontalMargin: 12,
                              sortArrowBuilder: null,
                              border: TableBorder(
                                  horizontalInside: BorderSide(
                                      color: Theme.of(context).primaryColor),
                                  right: BorderSide(
                                      color: Theme.of(context).primaryColor)),
                              dividerThickness: 1,
                              bottomMargin: 10,
                              minWidth: 900,
                              sortColumnIndex: blocContext
                                  .read<UserBloc>()
                                  .state
                                  .sortColumnIndex,
                              sortAscending: blocContext
                                  .read<UserBloc>()
                                  .state
                                  .sortAscending,
                              sortArrowIcon: Icons.keyboard_arrow_up,
                              sortArrowAnimationDuration:
                                  const Duration(milliseconds: 500),
                              columns: _columns(widthSize),
                              empty: Center(
                                  child: Container(
                                      padding: const EdgeInsets.all(20),
                                      color: Colors.grey[200],
                                      child: const Text(
                                          'No hay registros para mostrar.'))),
                              rows: _rows(widthSize),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
        SizedBox(
          width: widthSize < 1300 ? (widthSize * 0.8) : (widthSize * 0.5),
          child: Card(
            margin: EdgeInsets.zero,
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Text(
                    'Total usuarios: ${blocContext.read<UserBloc>().state.totalRow}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  Text(
                    'Total paginas: ${cantidadDePaginas(
                      blocContext.read<UserBloc>().state.totalRow,
                      blocContext.read<UserBloc>().state.rowsPerPage,
                    )}',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  Pager(
                    currentPage: blocContext.read<UserBloc>().state.currentPage,
                    totalPages: cantidadDePaginas(
                      blocContext.read<UserBloc>().state.totalRow,
                      blocContext.read<UserBloc>().state.rowsPerPage,
                    ),
                    onPageChanged: (page) {
                      int pageQuery = page - 1;
                      blocContext
                          .read<UserBloc>()
                          .add(UserCurrentPageChanged(currentPage: page));
                      String columnName =
                          blocContext.read<UserBloc>().state.columnName;
                      var order =
                          blocContext.read<UserBloc>().state.sortAscending
                              ? 'asc'
                              : 'desc';
                      blocContext.read<UserBloc>().add(LoadUserList(
                            page: pageQuery,
                            sort: columnName,
                            ascending: order,
                          ));
                    },
                    numberButtonSelectedColor: Theme.of(context).primaryColor,
                    numberTextUnselectedColor: Colors.grey,
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }

  List<DataRow> _rows(double widthSize) {
    return users.map((user) {
      return DataRow2.byIndex(
        index: user.id,
        cells: _cell(user, widthSize),
      );
    }).toList();
  }

  int cantidadDePaginas(int totalRegistros, int registrosPorPagina) {
    return (totalRegistros / registrosPorPagina).ceil();
  }

  List<DataColumn> _columns(double widthSize) {
    return [
      DataColumn2(
        label: const Text(''),
        size: ColumnSize.L,
        fixedWidth: widthSize < 1200 ? 150 : 300,
      ),
      DataColumn2(
        label: const Align(
          alignment: Alignment.centerLeft,
          child: Text('Id'),
        ),
        fixedWidth: 80,
        numeric: true,
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
      ),
      DataColumn2(
        label: const Text('Usuario'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
        fixedWidth: 100,
      ),
      DataColumn2(
        label: const Text('Nombre'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
      ),
      DataColumn2(
        label: const Text('Apellido'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
      ),
      DataColumn2(
        label: const Text('Email'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
      ),
      DataColumn2(
        label: const Text('Activado'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
        fixedWidth: 100,
      ),
      DataColumn2(
        label: const Text('Fecha creación'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
        fixedWidth: 200,
      ),
      DataColumn2(
        label: const Text('Modificado por'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
        fixedWidth: 150,
      ),
      DataColumn2(
        label: const Text('Fecha modificación'),
        onSort: (columnIndex, ascending) => sort(columnIndex, ascending),
        fixedWidth: 200,
      ),
    ];
  }

  List<DataCell> _cell(User user, double widthSize) {
    return [
      DataCell(
        Row(
          children: [
            widthSize > 1200
                ? TextButton.icon(
                    label: const Text('Ver'),
                    onPressed: () {
                      blocContext.push('${UserRoutes.viewPath}${user.login}');
                    },
                    icon: const Icon(
                      Icons.remove_red_eye_outlined,
                      color: Colors.green,
                    ),
                  )
                : IconButton(
                    onPressed: () {
                      blocContext.push('${UserRoutes.viewPath}${user.login}');
                    },
                    icon: const Icon(
                      Icons.remove_red_eye_outlined,
                      color: Colors.green,
                    ),
                  ),
            widthSize > 1200
                ? TextButton.icon(
                    label: const Text('Editar'),
                    onPressed: () {
                      blocContext.push('${UserRoutes.editPath}${user.login}');
                    },
                    icon: const Icon(
                      Icons.edit,
                      color: Colors.amber,
                    ),
                  )
                : IconButton(
                    onPressed: () {
                      blocContext.push('${UserRoutes.editPath}${user.login}');
                    },
                    icon: const Icon(
                      Icons.edit,
                      color: Colors.amber,
                    ),
                  ),
            widthSize > 1200
                ? TextButton.icon(
                    label: const Text('Eliminar'),
                    onPressed: () {
                      showDialog(
                        context: blocContext,
                        builder: (BuildContext context) {
                          return UserDeleteDialog(
                            login: user.login,
                            blocContext: blocContext,
                          );
                        },
                      );
                    },
                    icon: const Icon(
                      Icons.delete_forever,
                      color: Colors.red,
                    ),
                  )
                : IconButton(
                    onPressed: () {
                      showDialog(
                        context: blocContext,
                        builder: (BuildContext context) {
                          return UserDeleteDialog(
                            login: user.login,
                            blocContext: blocContext,
                          );
                        },
                      );
                    },
                    icon: const Icon(
                      Icons.delete_forever,
                      color: Colors.red,
                    ),
                  ),
          ],
        ),
      ),
      DataCell(
        Align(alignment: Alignment.centerLeft, child: Text('${user.id}')),
      ),
      DataCell(
        Text(user.login),
      ),
      DataCell(
        Text(user.firstName ?? ''),
      ),
      DataCell(
        Text(user.lastName ?? ''),
      ),
      DataCell(
        Text('${user.email}'),
      ),
      DataCell(
        Text(user.activated ? 'SI' : 'NO'),
      ),
      DataCell(
        Text(user.createdDate ?? ''),
      ),
      DataCell(
        Text('${user.lastModifiedBy}'),
      ),
      DataCell(
        Text(user.lastModifiedDate ?? ''),
      ),
    ];
  }

  void sort(
    int columnIndex,
    bool ascending,
  ) {
    var columnName = 'id';
    switch (columnIndex) {
      case 1:
        columnName = 'id';
        break;
      case 2:
        columnName = 'login';
        break;
      case 3:
        columnName = 'firstName';
        break;
      case 4:
        columnName = 'lastName';
        break;
      case 5:
        columnName = 'email';
        break;
      case 6:
        columnName = 'activated';
        break;
      case 7:
        columnName = 'createdDate';
        break;
      case 8:
        columnName = 'lastModifiedBy';
        break;
      case 9:
        columnName = 'lastModifiedDate';
        break;
    }
    int pageQuery = blocContext.read<UserBloc>().state.currentPage - 1;
    var order = ascending ? 'asc' : 'desc';

    blocContext.read<UserBloc>().add(UserSortChanged(
          sortColumnIndex: columnIndex,
          sortAscending: ascending,
          columnName: columnName,
        ));

    blocContext
        .read<UserBloc>()
        .add(LoadUserList(page: pageQuery, sort: columnName, ascending: order));
  }
}
