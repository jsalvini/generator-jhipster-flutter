import 'dart:async';
import 'package:bloc/bloc.dart';
import 'package:formz/formz.dart';
import 'package:equatable/equatable.dart';
import 'package:<%= baseName %>/account/authentication/models/authentication.dart';
import 'package:<%= baseName %>/account/login/login.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/account/authentication/authentication_repository.dart';

part 'login_event.dart';
part 'login_state.dart';

class LoginBloc extends Bloc<LoginEvent, LoginState> {
  final AuthenticationRepository _authenticationRepository;

  LoginBloc({required AuthenticationRepository authenticationRepository})
      : _authenticationRepository = authenticationRepository,
        super(const LoginState()) {
    on<LoginUsernameChanged>(onUsernameChanged);
    on<LoginPasswordChanged>(onPasswordChanged);
    on<LoginSubmitted>(onSubmitted);
    on<StatusChanged>(onStatusChanged);
  }

  void onStatusChanged(
    StatusChanged event,
    Emitter<LoginState> emit,
  ) {
    emit(
      state.copyWith(
        status: event.status,
      ),
    );
  }

  void onUsernameChanged(
    LoginUsernameChanged event,
    Emitter<LoginState> emit,
  ) {
    final username = UsernameInput.dirty(event.username);
    emit(
      state.copyWith(
        username: username,
        isValid: Formz.validate([state.password, username]),
      ),
    );
  }

  void onPasswordChanged(
    LoginPasswordChanged event,
    Emitter<LoginState> emit,
  ) {
    final password = PasswordInput.dirty(event.password);
    emit(
      state.copyWith(
        password: password,
        isValid: Formz.validate([password, state.username]),
      ),
    );
  }

  Future<void> onSubmitted(
    LoginSubmitted event,
    Emitter<LoginState> emit,
  ) async {
    if (state.isValid) {
      emit(state.copyWith(status: FormzSubmissionStatus.inProgress));
      try {
        Authentication authentication = Authentication(
          username: state.username.value,
          password: state.password.value,
        );
        final result =
            await _authenticationRepository.authenticate(authentication);

        result.fold(
          (Failure failure) {
            //print('Login: ${failure.errorMessage}');
            //'Error usuario/contraseña incorrecto, verifique.'
            emit(
              state.copyWith(
                status: FormzSubmissionStatus.failure,
                generalNotificationKey:
                    failure.errorMessage.contains('Bad credentials')
                        ? 'Error usuario/contraseña incorrecto, verifique.'
                        : failure.errorMessage,
              ),
            );
          },
          (bool data) {
            if (data) {
              emit(state.copyWith(status: FormzSubmissionStatus.success));
            } else {
              emit(state.copyWith(status: FormzSubmissionStatus.failure));
            }
          },
        );
      } catch (error) {
        emit(state.copyWith(
          status: FormzSubmissionStatus.failure,
          generalNotificationKey: error.toString(),
        ));
      }
    }
  }
}
