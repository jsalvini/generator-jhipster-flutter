import 'package:animate_do/animate_do.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:formz/formz.dart';
import 'package:<%= baseName %>/account/login/models/models.dart';
import 'package:<%= baseName %>/account/login/bloc/login_bloc.dart';

class LoginForm extends StatelessWidget {
  const LoginForm({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocListener<LoginBloc, LoginState>(
      listener: (context, state) {
        if (state.status.isFailure) {
          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(
              SnackBar(
                showCloseIcon: true,
                closeIconColor: Colors.white,
                duration: const Duration(seconds: 10),
                content: Text(
                  state.generalNotificationKey,
                  style: const TextStyle(
                    color: Colors.white,
                  ),
                ),
                backgroundColor: Colors.red,
              ),
            );
        }
      },
      child: const Center(
        child: SizedBox(
          width: 600,
          height: 600,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisSize: MainAxisSize.max,
            mainAxisAlignment: MainAxisAlignment.start,
            children: <Widget>[
              LoginHeader(),
              FormView(),
            ],
          ),
        ),
      ),
    );
  }
}

class LoginHeader extends StatelessWidget {
  const LoginHeader({super.key});

  @override
  Widget build(BuildContext context) {
    return FadeInDown(
      delay: const Duration(milliseconds: 800),
      child: Container(
        height: 280,
        constraints: const BoxConstraints(
          maxWidth: 570.0,
        ),
        child: const Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Icon(
              Icons.play_arrow_rounded,
              color: Color(0xffdc2a20),
              shadows: [
                Shadow(
                  blurRadius: 3.0,
                  color: Color(0xff191918),
                  offset: Offset(0.0, 3.0),
                ),
                Shadow(
                  blurRadius: 3.0,
                  color: Color(0xff191918),
                  offset: Offset(0.0, -3.0),
                )
              ],
              size: 200,
            ),
            Text(
              '<%= camelizedUpperFirstBaseName %>',
              style: TextStyle(
                  color: Color(
                      0xffdc2a20), // Puedes ajustar el color según tus necesidades
                  fontSize: 40,
                  fontWeight: FontWeight.bold
                  //fontFamily: 'monospace',
                  // Puedes ajustar el tamaño de la fuente según tus necesidades
                  ),
            ),
          ],
        ),
      ),
    );
  }
}

class FormView extends StatelessWidget {
  const FormView({super.key});

  @override
  Widget build(BuildContext context) {
    return FadeInUp(
      delay: const Duration(milliseconds: 800),
      child: Container(
        height: 280,
        constraints: const BoxConstraints(
          maxWidth: 570.0,
        ),
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.onPrimary,
          boxShadow: [
            BoxShadow(
              blurRadius: 3.0,
              color: Theme.of(context).primaryColor,
              offset: const Offset(0.0, 3.0),
            )
          ],
          borderRadius: BorderRadius.circular(12.0),
        ),
        child: const Padding(
          padding: EdgeInsets.all(15.0),
          child: Form(
              child: Wrap(
            alignment: WrapAlignment.center,
            runSpacing: 30,
            children: <Widget>[
              _UsernameInput(),
              _PasswordInput(),
              _LoginButton(),
            ],
          )),
        ),
      ),
    );
  }
}

class _UsernameInput extends StatelessWidget {
  const _UsernameInput();

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<LoginBloc, LoginState>(
      buildWhen: (previous, current) => previous.username != current.username,
      builder: (context, state) {
        return TextFormField(
          key: const Key('loginForm_usernameInput_textField'),
          autofocus: true,
          onChanged: (value) {
            context
                .read<LoginBloc>()
                .add(LoginUsernameChanged(username: value));
          },
          keyboardType: TextInputType.text,
          decoration: InputDecoration(
              fillColor: Colors.white,
              labelText: 'Username',
              labelStyle:
                  const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
              contentPadding:
                  const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
              filled: true,
              isDense: true,
              errorText: state.username.displayError != null
                  ? UsernameValidationError.invalid.invalidMessage
                  : null),
        );
      },
    );
  }
}

class _PasswordInput extends StatelessWidget {
  const _PasswordInput();

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<LoginBloc, LoginState>(
      buildWhen: (previous, current) => previous.password != current.password,
      builder: (context, state) {
        return TextFormField(
          key: const Key('loginForm_passwordInput_textField'),
          onChanged: (value) {
            context
                .read<LoginBloc>()
                .add(LoginPasswordChanged(password: value));
          },
          obscureText: true,
          decoration: InputDecoration(
              fillColor: Colors.white,
              labelText: 'Password',
              labelStyle:
                  const TextStyle(height: 0.5, fontWeight: FontWeight.bold),
              contentPadding:
                  const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
              filled: true,
              isDense: true,
              errorText: state.password.displayError != null
                  ? PasswordValidationError.invalid.invalidMessage
                  : null),
        );
      },
    );
  }
}

class _LoginButton extends StatelessWidget {
  const _LoginButton();

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<LoginBloc, LoginState>(
      builder: (context, state) {
        return state.status.isInProgress
            ? const Padding(
                padding: EdgeInsets.only(top: 30, bottom: 20),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                  ],
                ),
              )
            : Padding(
                padding: const EdgeInsets.only(top: 30, bottom: 20),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    ElevatedButton(
                      key: const Key('loginForm_elevatedButton'),
                      onPressed: state.isValid
                          ? () =>
                              context.read<LoginBloc>().add(LoginSubmitted())
                          : null,
                      style: ButtonStyle(
                        backgroundColor: MaterialStatePropertyAll(
                          state.isValid
                              ? const Color(0xff191918)
                              : const Color(0xff191918).withOpacity(0.3),
                        ),
                      ),
                      child: SizedBox(
                        width: MediaQuery.of(context).size.width * 0.2,
                        height: 50,
                        child: const Center(
                          child: Text(
                            'Ingresar',
                            style: TextStyle(color: Colors.white, fontSize: 24),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              );
      },
    );
  }
}
