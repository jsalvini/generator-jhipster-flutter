import 'dart:async';
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:<%= baseName %>/account/user/models/user_model.dart';
import 'package:<%= baseName %>/core/core.dart';
import 'package:<%= baseName %>/shared/repository/account_repository.dart';

part 'home_event.dart';
part 'home_state.dart';

class HomeBloc extends Bloc<HomeEvent, HomeState> {
  final AccountRepository _accountRepository;

  HomeBloc({required AccountRepository accountRepository})
      : _accountRepository = accountRepository,
        super(const HomeState()) {
    on<Init>(onInit);
  }

  Future<void> onInit(
    Init event,
    Emitter<HomeState> emit,
  ) async {
    final result = await _accountRepository.getAccount();

    result.fold(
      (Failure failure) {},
      (User? data) {
        User? currentUser = data;
        emit(
          state.copyWith(
            currentUser: currentUser,
          ),
        );
      },
    );
  }
}

