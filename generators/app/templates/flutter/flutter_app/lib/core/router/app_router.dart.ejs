import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:<%= baseName %>/shared/storage/secure_storage.dart';
import 'package:<%= baseName %>/shared/utils/http_utils.dart';
import 'package:<%= baseName %>/error/views/error_screen.dart';

import 'package:<%= baseName %>/account/authentication/authentication.dart';
import 'package:<%= baseName %>/account/login/login_routes.dart';
import 'package:<%= baseName %>/account/settings/settings_routes.dart';
import 'package:<%= baseName %>/home/home_routes.dart';
import 'package:<%= baseName %>/shared/repository/authentication_repository.dart';
import 'package:<%= baseName %>/splash/splash_routes.dart';
// jhipster-merlin-needle-import-add - JHipster will add new imports here

abstract class AppRouter {
  static GoRouter router = GoRouter(
    initialLocation: LoginRoutes.path,
    routes: [
      ...SplashRoutes.splashRoutes,
      ...HomeRoutes.homeRoutes,
      ...LoginRoutes.loginRoutes,
      ...SettingsRoutes.settingsRoutes,
      // jhipster-merlin-needle-route-add - JHipster will add new routes here
    ],
    errorPageBuilder: (context, state) {
      GoException? goException = state.error;
      return MaterialPage(
          child: ErrorScreen(
        message: goException?.message ?? 'Exception page builder.',
      ));
    },
    redirect: (context, state) async {
      final isAuthenticated =
          context.read<AuthenticationBloc>().isAuthenticated;

      String? jwt =
          await SecureStorage.storage.read(key: HttpUtils.keyForJWTToken);
      final irA = state.matchedLocation;
      bool tokenValid;

      if (jwt != null) {
        var jwt2 = jwt.split(".");
        var payload =
            json.decode(ascii.decode(base64.decode(base64.normalize(jwt2[1]))));
        if (DateTime.fromMillisecondsSinceEpoch(payload["exp"] * 1000)
            .isAfter(DateTime.now())) {
          tokenValid = true;
        } else {
          tokenValid = false;
        }
      } else {
        tokenValid = false;
      }

      if (isAuthenticated &&
          irA.compareTo(LoginRoutes.path) == 0 &&
          tokenValid) {
        return HomeRoutes.path;
      } else if (!isAuthenticated && !tokenValid) {
        return LoginRoutes.path;
      }
      return null;
    },
  );
}
